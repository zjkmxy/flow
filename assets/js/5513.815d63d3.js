"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[5513],{55513:e=>{e.exports=JSON.parse('{"title":"All our posts","items":[{"title":"New Flow Language Features for React","permalink":"/blog/2024/04/03/New-Flow-Language-Features-for-React"},{"title":"Announcing Conditional Types","permalink":"/blog/2024/03/05/Announcing-Conditional-Types"},{"title":"Announcing User Defined Type Guards in Flow","permalink":"/blog/2024/03/05/Announcing-User-Defined-Type-Guards-in-Flow"},{"title":"New type casting syntax for Flow: \'as\'","permalink":"/blog/2024/02/06/New-type-casting-syntax-for-Flow-as"},{"title":"Improved Flow Docs and Try Flow","permalink":"/blog/2023/09/19/Improved-Flow-Docs-and-Try-Flow"},{"title":"Announcing 5 new Flow tuple type features","permalink":"/blog/2023/08/17/Announcing-5-new-Flow-tuple-type-features"},{"title":"Flow can now detect unused Promises","permalink":"/blog/2023/04/10/Unused-Promise"},{"title":"Announcing Partial & Required Flow utility types + catch annotations","permalink":"/blog/2023/03/15/Announcing-Partial-and-Required-Flow-utility-types-and-catch-annotations"},{"title":"Exact object types by default, by default","permalink":"/blog/2023/02/16/Exact-object-types-by-default-by-default"},{"title":"Local Type Inference for Flow","permalink":"/blog/2023/01/17/Local-Type-Inference"},{"title":"Improved handling of the empty object in Flow","permalink":"/blog/2022/10/20/Improved-handling-of-the-empty-object-in-Flow"},{"title":"Requiring More Annotations to Functions and Classes in Flow","permalink":"/blog/2022/09/30/Requiring-More-Annotations-on-Functions-and-Classes"},{"title":"New Flow Language Rule: Constrained Writes","permalink":"/blog/2022/08/05/New-Flow-Language-Rule-Constrained-Writes"},{"title":"Introducing: Local Type Inference for Flow","permalink":"/blog/2021/09/27/Introducing-Local-Type-Inference-for-Flow"},{"title":"Introducing Flow Enums","permalink":"/blog/2021/09/13/Introducing-Flow-Enums"},{"title":"TypeScript Enums vs. Flow Enums","permalink":"/blog/2021/09/13/TypeScript-Enums-vs-Flow-Enums"},{"title":"Introducing Flow Indexed Access Types","permalink":"/blog/2021/07/21/Introducing-Flow-Indexed-Access-Types"},{"title":"Sound Typing for \'this\' in Flow","permalink":"/blog/2021/06/02/Sound-Typing-for-this-in-Flow"},{"title":"Clarity on Flow\'s Direction and Open Source Engagement","permalink":"/blog/2021/05/25/Clarity-on-Flows-Direction-and-Open-Source-Engagement"},{"title":"Types-First the only supported mode in Flow (Jan 2021)","permalink":"/blog/2020/12/01/Types-first-the-only-supported-mode-in-flow"},{"title":"Flow\'s Improved Handling of Generic Types","permalink":"/blog/2020/11/16/Flows-Improved-Handling-of-Generic-Types"},{"title":"Types-First: A Scalable New Architecture for Flow","permalink":"/blog/2020/05/18/Types-First-A-Scalable-New-Architecture-for-Flow"},{"title":"Making Flow error suppressions more specific","permalink":"/blog/2020/03/16/Making-Flow-error-suppressions-more-specific"},{"title":"What we\u2019re building in 2020","permalink":"/blog/2020/03/09/What-were-building-in-2020"},{"title":"Improvements to Flow in 2019","permalink":"/blog/2020/02/19/Improvements-to-Flow-in-2019"},{"title":"How to upgrade to exact-by-default object type syntax","permalink":"/blog/2020/01/29/How-to-Upgrade-to-exact-by-default-object-type-syntax"},{"title":"Spreads: Common Errors & Fixes","permalink":"/blog/2019/10/30/Spreads-Common-Errors-and-Fixes"},{"title":"Live Flow errors in your IDE","permalink":"/blog/2019/10/25/Live-Flow-Errors-in-your-IDE"},{"title":"Coming Soon: Changes to Object Spreads","permalink":"/blog/2019/08/20/Changes-to-Object-Spreads"},{"title":"Upgrading Flow Codebases","permalink":"/blog/2019/4/9/Upgrading-Flow-Codebases"},{"title":"A More Responsive Flow","permalink":"/blog/2019/2/8/A-More-Responsive-Flow"},{"title":"What the Flow Team Has Been Up To","permalink":"/blog/2019/1/28/What-the-flow-team-has-been-up-to"},{"title":"Supporting React.forwardRef and Beyond","permalink":"/blog/2018/12/13/React-Abstract-Component"},{"title":"Asking for Required Annotations","permalink":"/blog/2018/10/29/Asking-for-Required-Annotations"},{"title":"On the Roadmap: Exact Objects by Default","permalink":"/blog/2018/10/18/Exact-Objects-By-Default"},{"title":"New Flow Errors on Unknown Property Access in Conditionals","permalink":"/blog/2018/03/16/New-Flow-Errors-on-Unknown-Property-Access-in-Conditionals"},{"title":"Better Flow Error Messages for the JavaScript Ecosystem","permalink":"/blog/2018/02/20/Better-Flow-Error-Messages-for-the-Javascript-Ecosystem"},{"title":"Typing Higher-Order Components in Recompose With Flow","permalink":"/blog/2017/09/03/Flow-Support-in-Recompose"},{"title":"Private Object Properties Using Flow\u2019s Opaque Type Aliases","permalink":"/blog/2017/08/25/Private-Object-Properties-Using-Flows-Opaque-Type-Aliases"},{"title":"Even Better Support for React in Flow","permalink":"/blog/2017/08/16/Even-Better-Support-for-React-in-Flow"},{"title":"Linting in Flow","permalink":"/blog/2017/08/04/Linting-in-Flow"},{"title":"Opaque Type Aliases","permalink":"/blog/2017/07/27/Opaque-Types"},{"title":"Strict Checking of Function Call Arity","permalink":"/blog/2017/05/07/Strict-Function-Call-Arity"},{"title":"Introducing Flow-Typed","permalink":"/blog/2016/10/13/Flow-Typed"},{"title":"Property Variance and Other Upcoming Changes","permalink":"/blog/2016/10/04/Property-Variance"},{"title":"Windows Support is Here!","permalink":"/blog/2016/08/01/Windows-Support"},{"title":"New Implementation of Unions and Intersections","permalink":"/blog/2016/07/01/New-Unions-Intersections"},{"title":"Version 0.21.0","permalink":"/blog/2016/02/02/Version-0.21.0"},{"title":"Version-0.19.0","permalink":"/blog/2015/12/01/Version-0.19.0"},{"title":"Typing Generators with Flow","permalink":"/blog/2015/11/09/Generators"},{"title":"Version-0.17.0","permalink":"/blog/2015/10/07/Version-0.17.0"},{"title":"Version-0.16.0","permalink":"/blog/2015/09/22/Version-0.16.0"},{"title":"Version-0.15.0","permalink":"/blog/2015/09/10/Version-0.15.0"},{"title":"Version-0.14.0","permalink":"/blog/2015/07/29/Version-0.14.0"},{"title":"Announcing Disjoint Unions","permalink":"/blog/2015/07/03/Disjoint-Unions"},{"title":"Announcing Bounded Polymorphism","permalink":"/blog/2015/03/12/Bounded-Polymorphism"},{"title":"Announcing Flow Comments","permalink":"/blog/2015/02/20/Flow-Comments"},{"title":"Announcing Import Type","permalink":"/blog/2015/02/18/Import-Types"},{"title":"Announcing Typecasts","permalink":"/blog/2015/02/18/Typecasts"}]}')}}]);