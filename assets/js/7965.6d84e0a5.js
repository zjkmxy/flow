"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7965],{47965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(58168),i=(n(96540),n(15680));n(60681);const a={title:"Flow Annotate-Exports",slug:"/cli/annotate-exports"},r=void 0,s={unversionedId:"cli/annotate-exports",id:"cli/annotate-exports",title:"Flow Annotate-Exports",description:"Upgrading to Types-First mode may require a substantial",source:"@site/docs/cli/annotate-exports.md",sourceDirName:"cli",slug:"/cli/annotate-exports",permalink:"/en/docs/cli/annotate-exports",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/cli/annotate-exports.md",tags:[],version:"current",frontMatter:{title:"Flow Annotate-Exports",slug:"/cli/annotate-exports"},sidebar:"docsSidebar",previous:{title:"Flow Coverage",permalink:"/en/docs/cli/coverage"},next:{title:".flowconfig",permalink:"/en/docs/config"}},l={},d=[{value:"How to apply the codemod",id:"toc-how-to-apply-the-codemod",level:3},{value:"Codemod output",id:"toc-codemod-output",level:3}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,o.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Upgrading to ",(0,i.mdx)("a",{parentName:"p",href:"../../lang/types-first"},"Types-First")," mode may require a substantial\nnumber of type annotations at module boundaries. To help with the process of\nupgrading large codebases, we are providing a codemod command, whose goal is to\nfill in these missing annotations. This command is included in the Flow binary\nin versions ",(0,i.mdx)("inlineCode",{parentName:"p"},">= 0.125"),"."),(0,i.mdx)("blockquote",null,(0,i.mdx)("p",{parentName:"blockquote"},"Note: As of version 0.134, types-first is the default mode. If you are using a\nversion ",(0,i.mdx)("inlineCode",{parentName:"p"},">=0.134"),", make sure you set ",(0,i.mdx)("inlineCode",{parentName:"p"},"types_first=false")," in your .flowconfig while\nrunning this codemod.")),(0,i.mdx)("p",null,"This command uses types that Flow infers, to fill in positions that would otherwise\nraise ",(0,i.mdx)("em",{parentName:"p"},"signature-verification")," failures. It will include the necessary type import\nstatements, as long as the respective types are exported from their defining modules."),(0,i.mdx)("p",null,"It is designed for use on multiple files at once, rather than one file at a time.\nFor this reason it doesn't connect to an existing Flow server, but rather starts\na checking process of its own."),(0,i.mdx)("p",null,"As is typical with such mechanized approaches, it comes with a few caveats:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"It won\u2019t be able to fill in every required type annotation. Some cases will\nrequire manual effort."),(0,i.mdx)("li",{parentName:"ol"},"Inserted annotations may cause new flow errors, since it\u2019s not always possible\nto match inferred type with types that can be written as annotations."),(0,i.mdx)("li",{parentName:"ol"},"File formatting may be affected. If a code formatter (e.g. prettier) is used,\nit is recommended that you run it after the codemod has finished running.")),(0,i.mdx)("h3",{id:"toc-how-to-apply-the-codemod"},"How to apply the codemod"),(0,i.mdx)("p",null,"A typical way to invoke this command is"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"flow codemod annotate-exports \\\n  --write \\\n  --repeat \\\n  --log-level info \\\n  /path/to/folder \\\n  2> out.log\n")),(0,i.mdx)("p",null,"This command will transform files under ",(0,i.mdx)("inlineCode",{parentName:"p"},"/path/to/folder"),". This does not need to\nbe the root directory (the one containing ",(0,i.mdx)("inlineCode",{parentName:"p"},".flowconfig"),")."),(0,i.mdx)("p",null,"It uses the following flags:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("inlineCode",{parentName:"p"},"--write")," will update files that require annotations under ",(0,i.mdx)("inlineCode",{parentName:"p"},"/path/to/folder"),"\nin-place. Without this flag the resulting files will be printed on the command line.")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("inlineCode",{parentName:"p"},"--repeat")," ensures that the transformation will be applied until no more files\nchange. This mode is necessary here, because each new type the codemod adds may\nrequire new locations to be annotated.")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},(0,i.mdx)("inlineCode",{parentName:"p"},"--log-level info")," outputs useful debugging information in the standard error stream.\nThis option might lead to verbose output, so we're redirecting the error output\nto a log file ",(0,i.mdx)("inlineCode",{parentName:"p"},"out.log"),"."))),(0,i.mdx)("p",null,"Another convenient way to provide the input is by passing the flag"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"--input-file file.txt\n")),(0,i.mdx)("p",null,"where ",(0,i.mdx)("inlineCode",{parentName:"p"},"file.txt")," contains a specific list of files to be transformed."),(0,i.mdx)("h3",{id:"toc-codemod-output"},"Codemod output"),(0,i.mdx)("p",null,"After each iteration of the codemod, a summary will be printed on the CLI. This\nsummary includes statistical information about the number of annotations that were\nadded, and how many locations were skipped. It also prints counts for various kinds\nof errors that were encountered. These can be matched to the errors printed in the\nlogs."),(0,i.mdx)("p",null,"A common error case is when a type ",(0,i.mdx)("inlineCode",{parentName:"p"},"A"),", defined in a file ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.js"),", but not exported,\nis inferred in file ",(0,i.mdx)("inlineCode",{parentName:"p"},"b.js"),". The codemod will skip adding this annotation and report\nan error in the logs. The fix this case, you can export ",(0,i.mdx)("inlineCode",{parentName:"p"},"A")," in ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.js"),". Note that\nit is not necessary to manually import ",(0,i.mdx)("inlineCode",{parentName:"p"},"A")," in ",(0,i.mdx)("inlineCode",{parentName:"p"},"b.js"),". The codemod will do this\nautomatically."))}p.isMDXComponent=!0}}]);