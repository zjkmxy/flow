"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7052],{17052:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>r});var l=t(58168),i=(t(96540),t(15680));t(60681);const o={title:"Flowlint Comments",slug:"/linting/flowlint-comments"},a=void 0,s={unversionedId:"linting/flowlint-comments",id:"linting/flowlint-comments",title:"Flowlint Comments",description:"You can use flowlint comments to specify more granular lint settings within a file.",source:"@site/docs/linting/flowlint-comments.md",sourceDirName:"linting",slug:"/linting/flowlint-comments",permalink:"/en/docs/linting/flowlint-comments",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/linting/flowlint-comments.md",tags:[],version:"current",frontMatter:{title:"Flowlint Comments",slug:"/linting/flowlint-comments"},sidebar:"docsSidebar",previous:{title:"Linting Overview",permalink:"/en/docs/linting"},next:{title:"Lint Rule Reference",permalink:"/en/docs/linting/rule-reference"}},m={},r=[{value:"flowlint",id:"toc-flowlint",level:3},{value:"flowlint-line",id:"toc-flowlint-line",level:3},{value:"flowlint-next-line",id:"toc-flowlint-next-line",level:3}],p={toc:r};function d(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,l.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"You can use ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint")," comments to specify more granular lint settings within a file.\nThese comments come in three froms:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#toc-flowlint"},"flowlint")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#toc-flowlint-line"},"flowlint-line")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#toc-flowlint-next-line"},"flowlint-next-line"))),(0,i.mdx)("p",null,"In all forms, whitespace and asterisks between words are ignored, allowing for flexible formatting."),(0,i.mdx)("h3",{id:"toc-flowlint"},"flowlint"),(0,i.mdx)("p",null,"The basic ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint")," comment takes a comma-delimited list of ",(0,i.mdx)("inlineCode",{parentName:"p"},"rule:severity")," pairs and\napplies those settings for the rest of the source file until overridden. This has\nthree primary purposes: applying settings over a block, applying settings over a file,\nand applying settings over part of a line."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"settings over a block of code:"),"\nA pair of ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint")," comments can be used to apply a certain setting over a block of code.\nFor example, to disable the untyped-type-import lint over a block of type imports would look like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import type {\n  // flowlint untyped-type-import:off\n  Foo,\n  Bar,\n  Baz,\n  // flowlint untyped-type-import:error\n} from './untyped.js';\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"settings over a file:"),"\nA ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint")," comment doesn't have to have a matching comment to form a block.\nAn unmatched comment simply applies its settings to the rest of the file. You\ncould use this, for example, to suppress all sketchy-null-check lints in a particular file:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// flowlint sketchy-null:off\n...\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"settings over part of a line:"),"\nThe settings applied by ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint")," start and end right at the comment itself. This\nmeans that you can do things like"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"function foo(a: ?boolean, b: ?boolean) {\n  if (/* flowlint sketchy-null-bool:off */a/* flowlint sketchy-null-bool:warn */ && b) {\n    ...\n  } else {\n    ...\n  }\n}\n")),(0,i.mdx)("p",null,"if you want control at an even finer level than you get from the line-based comments."),(0,i.mdx)("h3",{id:"toc-flowlint-line"},"flowlint-line"),(0,i.mdx)("p",null,"A ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint-line")," comment works similarly to a ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint")," comment, except it only\napplies its settings to the current line instead of applying them for the rest of the file.\nThe primary use for ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint-line")," comments is to suppress a lint on a particular line:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"function foo(x: ?boolean) {\n  if (x) { // flowlint-line sketchy-null-bool:off\n    ...\n  } else {\n    ...\n  }\n}\n")),(0,i.mdx)("h3",{id:"toc-flowlint-next-line"},"flowlint-next-line"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint-next-line")," works the same as ",(0,i.mdx)("inlineCode",{parentName:"p"},"flowlint-line"),", except it applies its settings to the next line instead of the current line:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"function foo(x: ?boolean) {\n  // flowlint-next-line sketchy-null-bool:off\n  if (x) {\n    ...\n  } else {\n    ...\n  }\n}\n")))}d.isMDXComponent=!0}}]);