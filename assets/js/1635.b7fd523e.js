"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1635],{21635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=t(58168),i=(t(96540),t(15680));t(60681);const r={title:"Mixed",slug:"/types/mixed"},l=void 0,s={unversionedId:"types/mixed",id:"types/mixed",title:"Mixed",description:"mixed is the supertype of all types. All values are mixed.",source:"@site/docs/types/mixed.md",sourceDirName:"types",slug:"/types/mixed",permalink:"/en/docs/types/mixed",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/mixed.md",tags:[],version:"current",frontMatter:{title:"Mixed",slug:"/types/mixed"},sidebar:"docsSidebar",previous:{title:"Literal Types",permalink:"/en/docs/types/literals"},next:{title:"Empty",permalink:"/en/docs/types/empty"}},o={},m=[{value:"Anything goes in, Nothing comes out",id:"toc-anything-goes-in-nothing-comes-out",level:2},{value:"Versus <code>any</code>",id:"versus-any",level:2},{value:"Versus <code>empty</code>",id:"versus-empty",level:2}],p={toc:m};function d(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"mixed")," is the ",(0,i.mdx)("a",{parentName:"p",href:"../../lang/type-hierarchy"},"supertype of all types"),". All values are ",(0,i.mdx)("inlineCode",{parentName:"p"},"mixed"),".\nHowever, this means that very few operations are permitted on it, without refining to some more specific type.\nThat's because the valid operations on ",(0,i.mdx)("inlineCode",{parentName:"p"},"mixed")," must be valid for all types."),(0,i.mdx)("p",null,"In general, programs have several different categories of types:"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A single type:")),(0,i.mdx)("p",null,"Here the input value can only be a ",(0,i.mdx)("inlineCode",{parentName:"p"},"number"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function square(n: number) {\n  return n * n;\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A group of different possible types:")),(0,i.mdx)("p",null,"Here the input value could be either a ",(0,i.mdx)("inlineCode",{parentName:"p"},"string")," or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"number"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function stringifyBasicValue(value: string | number) {\n  return '' + value;\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A type based on another type:")),(0,i.mdx)("p",null,"Here the return type will be the same as the type of whatever value is passed\ninto the function."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function identity<T>(value: T): T {\n  return value;\n}\n")),(0,i.mdx)("p",null,"These three are the most common categories of types. They will make up the\nmajority of the types you'll be writing."),(0,i.mdx)("p",null,"However, there is also a fourth category."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"An arbitrary type that could be anything:")),(0,i.mdx)("p",null,"Here the passed in value is an unknown type, it could be any type and the\nfunction would still work."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function getTypeOf(value: mixed): string {\n  return typeof value;\n}\n")),(0,i.mdx)("p",null,"These unknown types are less common, but are still useful at times."),(0,i.mdx)("p",null,"You should represent these values with ",(0,i.mdx)("inlineCode",{parentName:"p"},"mixed"),"."),(0,i.mdx)("h2",{id:"toc-anything-goes-in-nothing-comes-out"},"Anything goes in, Nothing comes out"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"mixed")," will accept any type of value. Strings, numbers, objects, functions\u2013\nanything will work."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'function stringify(value: mixed) {\n  // ...\n}\n\nstringify("foo");\nstringify(3.14);\nstringify(null);\nstringify({});\n')),(0,i.mdx)("p",null,"When you try to use a value of a ",(0,i.mdx)("inlineCode",{parentName:"p"},"mixed")," type you must first figure out what\nthe actual type is or you'll end up with an error."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":2,"startColumn":10,"endLine":2,"endColumn":19,"description":"Cannot use operator `+` with operands string [1] and mixed [2] [unsafe-addition]"}]','[{"startLine":2,"startColumn":10,"endLine":2,"endColumn":19,"description":"Cannot':!0,use:!0,operator:!0,"`+`":!0,with:!0,operands:!0,string:!0,"[1]":!0,and:!0,mixed:!0,"[2]":!0,'[unsafe-addition]"}]':!0},'function stringify(value: mixed) {\n  return "" + value; // Error!\n}\n\nstringify("foo");\n')),(0,i.mdx)("p",null,"Instead you must ensure the value is a certain type by ",(0,i.mdx)("a",{parentName:"p",href:"../../lang/refinements/"},"refining")," it."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'function stringify(value: mixed) {\n  if (typeof value === \'string\') {\n    return "" + value; // Works!\n  } else {\n    return "";\n  }\n}\n\nstringify("foo");\n')),(0,i.mdx)("p",null,"Because of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"typeof value === 'string'")," check, Flow knows the ",(0,i.mdx)("inlineCode",{parentName:"p"},"value")," can\nonly be a ",(0,i.mdx)("inlineCode",{parentName:"p"},"string")," inside of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"if")," statement. This is known as a\n",(0,i.mdx)("a",{parentName:"p",href:"../../lang/refinements/"},"refinement"),"."),(0,i.mdx)("h2",{id:"versus-any"},"Versus ",(0,i.mdx)("inlineCode",{parentName:"h2"},"any")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"mixed")," is safe, while ",(0,i.mdx)("a",{parentName:"p",href:"../any"},(0,i.mdx)("inlineCode",{parentName:"a"},"any"))," is not. Both accept all values, but ",(0,i.mdx)("inlineCode",{parentName:"p"},"any")," also unsafely allows all operations."),(0,i.mdx)("h2",{id:"versus-empty"},"Versus ",(0,i.mdx)("inlineCode",{parentName:"h2"},"empty")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"mixed")," is the opposite of ",(0,i.mdx)("a",{parentName:"p",href:"../empty"},(0,i.mdx)("inlineCode",{parentName:"a"},"empty")),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Everything is a ",(0,i.mdx)("inlineCode",{parentName:"li"},"mixed"),", but few operations are permitted on it without first refining to a specific type. It is the supertype of all types."),(0,i.mdx)("li",{parentName:"ul"},"Nothing is ",(0,i.mdx)("inlineCode",{parentName:"li"},"empty"),", but any operation is permitted on it. It is the subtype of all types.")))}d.isMDXComponent=!0}}]);