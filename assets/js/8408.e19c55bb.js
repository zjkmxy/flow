"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8408],{88408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var i=t(58168),a=(t(96540),t(15680));t(60681);const o={title:".flowconfig [untyped]",slug:"/config/untyped"},r=void 0,d={unversionedId:"config/untyped",id:"config/untyped",title:".flowconfig [untyped]",description:"The [untyped] section in a .flowconfig file tells Flow to not typecheck files",source:"@site/docs/config/untyped.md",sourceDirName:"config",slug:"/config/untyped",permalink:"/en/docs/config/untyped",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/config/untyped.md",tags:[],version:"current",frontMatter:{title:".flowconfig [untyped]",slug:"/config/untyped"},sidebar:"docsSidebar",previous:{title:".flowconfig [ignore]",permalink:"/en/docs/config/ignore"},next:{title:".flowconfig [declarations]",permalink:"/en/docs/config/declarations"}},l={},p=[],s={toc:p};function m(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,i.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"[untyped]")," section in a ",(0,a.mdx)("inlineCode",{parentName:"p"},".flowconfig")," file tells Flow to not typecheck files\nmatching the specified regular expressions and instead throw away types and treat modules as ",(0,a.mdx)("a",{parentName:"p",href:"../../types/any"},(0,a.mdx)("inlineCode",{parentName:"a"},"any")),"."),(0,a.mdx)("p",null,"This is different from the ",(0,a.mdx)("a",{parentName:"p",href:"../ignore"},(0,a.mdx)("inlineCode",{parentName:"a"},"[ignore]"))," config section that causes matching files to be ignored by the module resolver,\nwhich inherently makes them un-typechecked, and also unresolvable by ",(0,a.mdx)("inlineCode",{parentName:"p"},"import")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"require"),".\nWhen ignored, ",(0,a.mdx)("a",{parentName:"p",href:"../libs"},(0,a.mdx)("inlineCode",{parentName:"a"},"[libs]"))," must then be specified for each ",(0,a.mdx)("inlineCode",{parentName:"p"},"import")," using ",(0,a.mdx)("inlineCode",{parentName:"p"},"flow-typed"),", which may not always be desired."),(0,a.mdx)("p",null,"It is also different from the ",(0,a.mdx)("a",{parentName:"p",href:"../declarations"},(0,a.mdx)("inlineCode",{parentName:"a"},"[declarations]"))," section.\nThis also does not typecheck the file contents, but ",(0,a.mdx)("inlineCode",{parentName:"p"},"[declarations]")," does extract and use the signatures of functions, classes, etc, when checking other code."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"[untyped]")," instead causes a file to be ignored by the typechecker as if it had ",(0,a.mdx)("inlineCode",{parentName:"p"},"@noflow")," in it,\nresolve modules as ",(0,a.mdx)("inlineCode",{parentName:"p"},"any")," type, but allow them to NOT be ignored by the module resolver.\nAny matching file is skipped by Flow (not even parsed, like other ",(0,a.mdx)("inlineCode",{parentName:"p"},"@noflow")," files!), but can still be ",(0,a.mdx)("inlineCode",{parentName:"p"},"require()"),"'d."),(0,a.mdx)("p",null,"Things to keep in mind:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"These are ",(0,a.mdx)("a",{parentName:"li",href:"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html#TYPEregexp"},"OCaml regular expressions"),"."),(0,a.mdx)("li",{parentName:"ol"},"These regular expressions match against absolute paths. They probably should\nstart with ",(0,a.mdx)("inlineCode",{parentName:"li"},".*"))),(0,a.mdx)("p",null,"An example ",(0,a.mdx)("inlineCode",{parentName:"p"},"[untyped]")," section might look like:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"[untyped]\n.*/third_party/.*\n.*/src/\\(foo\\|bar\\)/.*\n.*\\.untyped\\.js\n")),(0,a.mdx)("p",null,"This ",(0,a.mdx)("inlineCode",{parentName:"p"},"[untyped]")," section will parse:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Any file or directory under a directory named ",(0,a.mdx)("inlineCode",{parentName:"li"},"third_party")),(0,a.mdx)("li",{parentName:"ol"},"Any file or directory under ",(0,a.mdx)("inlineCode",{parentName:"li"},".*/src/foo")," or under ",(0,a.mdx)("inlineCode",{parentName:"li"},".*/src/bar")),(0,a.mdx)("li",{parentName:"ol"},"Any file that ends with the extension ",(0,a.mdx)("inlineCode",{parentName:"li"},".untyped.js"))),(0,a.mdx)("p",null,"You may use the ",(0,a.mdx)("inlineCode",{parentName:"p"},"<PROJECT_ROOT>")," placeholder in your regular expressions.\nAt runtime, Flow will treat the placeholder as if it were the absolute path\nto the project's root directory. This is useful for writing regular\nexpressions that are relative rather than absolute."),(0,a.mdx)("p",null,"For example, you can write:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"[untyped]\n<PROJECT_ROOT>/third_party/.*\n")),(0,a.mdx)("p",null,"Which would parse in declaration mode any file or directory under the directory\nnamed ",(0,a.mdx)("inlineCode",{parentName:"p"},"third_party/")," within the project root. However, unlike the previous\nexample's ",(0,a.mdx)("inlineCode",{parentName:"p"},".*/third_party/.*"),", it would NOT parse files or directories under\ndirectories named ",(0,a.mdx)("inlineCode",{parentName:"p"},"third_party/"),", like ",(0,a.mdx)("inlineCode",{parentName:"p"},"src/third_party/"),"."))}m.isMDXComponent=!0}}]);