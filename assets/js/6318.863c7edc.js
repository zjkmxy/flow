"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6318],{46318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(58168),a=(t(96540),t(15680));t(60681);const r={title:"Ref Functions",slug:"/react/refs"},s=void 0,i={unversionedId:"react/refs",id:"react/refs",title:"Ref Functions",description:"React allows you to grab the instance of an element or component with refs.",source:"@site/docs/react/refs.md",sourceDirName:"react",slug:"/react/refs",permalink:"/en/docs/react/refs",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/react/refs.md",tags:[],version:"current",frontMatter:{title:"Ref Functions",slug:"/react/refs"},sidebar:"docsSidebar",previous:{title:"Event Handling",permalink:"/en/docs/react/events"},next:{title:"Higher-order Components",permalink:"/en/docs/react/hoc"}},l={},c=[{value:"Refs in Functional Components",id:"toc-refs-in-functional-components",level:2},{value:"Refs in Class Components",id:"toc-refs-in-class-components",level:2}],u={toc:c};function m(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,o.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"React allows you to grab the instance of an element or component with ",(0,a.mdx)("a",{parentName:"p",href:"https://react.dev/learn/manipulating-the-dom-with-refs"},"refs"),"."),(0,a.mdx)("h2",{id:"toc-refs-in-functional-components"},"Refs in Functional Components"),(0,a.mdx)("p",null,"Inside a functional component, refs are accessed with the ",(0,a.mdx)("inlineCode",{parentName:"p"},"useRef")," hook:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":5,"startColumn":21,"endLine":5,"endColumn":58,"description":"Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]"}]','[{"startLine":5,"startColumn":21,"endLine":5,"endColumn":58,"description":"Cannot':!0,call:!0,hook:!0,"[1]":!0,because:!0,React:!0,hooks:!0,can:!0,only:!0,be:!0,called:!0,within:!0,components:!0,or:!0,"hooks.":!0,'[react-rule-hook]"}]':!0},"import {useRef} from 'react';\nimport * as React from 'react';\n\nfunction MyComponent() {\n  const buttonRef = useRef<null | HTMLButtonElement>(null);\n  buttonRef as {current: null | HTMLButtonElement}; // useRef wraps the ref value in an object\n  return <button ref={buttonRef}>Toggle</button>;\n}\n")),(0,a.mdx)("p",null,"Note that ",(0,a.mdx)("inlineCode",{parentName:"p"},"useRef")," wraps the ref value in an object with a ",(0,a.mdx)("inlineCode",{parentName:"p"},"current")," property. This must be\nreflected in the type of anything accepting the ref value."),(0,a.mdx)("h2",{id:"toc-refs-in-class-components"},"Refs in Class Components"),(0,a.mdx)("p",null,"Refs in class components are similar to function components. To create one, add a\nproperty to your class and assign the result of ",(0,a.mdx)("inlineCode",{parentName:"p"},"React.createRef")," to it."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":8,"startColumn":5,"endLine":8,"endColumn":9,"description":"Cannot call `super` because function [1] requires another argument. [incompatible-call]"}]','[{"startLine":8,"startColumn":5,"endLine":8,"endColumn":9,"description":"Cannot':!0,call:!0,"`super`":!0,because:!0,function:!0,"[1]":!0,requires:!0,another:!0,"argument.":!0,'[incompatible-call]"}]':!0},"import * as React from 'react';\n\nclass MyComponent extends React.Component<{}> {\n  // The `null` here is important because you may not always have the instance.\n  buttonRef: {current: null | HTMLButtonElement};\n\n  constructor() {\n    super();\n    this.buttonRef = React.createRef<HTMLButtonElement>();\n  }\n\n  render(): React.Node {\n    return <button ref={this.buttonRef}>Toggle</button>;\n  }\n}\n")),(0,a.mdx)("p",null,"One notable difference between ",(0,a.mdx)("inlineCode",{parentName:"p"},"useRef")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"createRef")," is that ",(0,a.mdx)("inlineCode",{parentName:"p"},"createRef")," does not accept\na default value. It will initialize the ref with the value ",(0,a.mdx)("inlineCode",{parentName:"p"},"null"),". This is because\nDOM elements will not exist until the first render of ",(0,a.mdx)("inlineCode",{parentName:"p"},"MyComponent")," and so a ",(0,a.mdx)("inlineCode",{parentName:"p"},"null")," value\nmust be used."),(0,a.mdx)("p",null,"Again, note that the ref value is wrapped in an object with a ",(0,a.mdx)("inlineCode",{parentName:"p"},"current")," property."))}m.isMDXComponent=!0}}]);