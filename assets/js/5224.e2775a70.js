"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[5224],{45224:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=t(58168),i=(t(96540),t(15680));t(60681);const o={title:"Subsets & Subtypes",slug:"/lang/subtypes"},s=void 0,p={unversionedId:"lang/subtypes",id:"lang/subtypes",title:"Subsets & Subtypes",description:"What is a subtype?",source:"@site/docs/lang/subtypes.md",sourceDirName:"lang",slug:"/lang/subtypes",permalink:"/en/docs/lang/subtypes",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/lang/subtypes.md",tags:[],version:"current",frontMatter:{title:"Subsets & Subtypes",slug:"/lang/subtypes"},sidebar:"docsSidebar",previous:{title:"Variable Declarations",permalink:"/en/docs/lang/variables"},next:{title:"Type Hierarchy",permalink:"/en/docs/lang/type-hierarchy"}},r={},l=[{value:"What is a subtype?",id:"toc-what-is-a-subtype",level:2},{value:"When are subtypes used?",id:"toc-when-are-subtypes-used",level:2},{value:"Subtypes of complex types",id:"toc-subtypes-of-complex-types",level:2},{value:"Subtypes of objects",id:"toc-subtypes-of-objects",level:3},{value:"Subtypes of functions",id:"toc-subtypes-of-functions",level:3}],m={toc:l};function d(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h2",{id:"toc-what-is-a-subtype"},"What is a subtype?"),(0,i.mdx)("p",null,"A type like ",(0,i.mdx)("inlineCode",{parentName:"p"},"number"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"boolean"),", or ",(0,i.mdx)("inlineCode",{parentName:"p"},"string")," describes a set of possible\nvalues. A ",(0,i.mdx)("inlineCode",{parentName:"p"},"number")," describes every possible number, so a single number\n(such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"42"),") would be a ",(0,i.mdx)("em",{parentName:"p"},"subtype")," of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"number")," type. Conversely, ",(0,i.mdx)("inlineCode",{parentName:"p"},"number"),"\nwould be a ",(0,i.mdx)("em",{parentName:"p"},"supertype")," of the type ",(0,i.mdx)("inlineCode",{parentName:"p"},"42"),"."),(0,i.mdx)("p",null,"If we want to know whether one type is the subtype of another, we need to look at\nall the possible values for both types and figure out if the other has a\n",(0,i.mdx)("em",{parentName:"p"},"subset")," of the values."),(0,i.mdx)("p",null,"For example, if we had a ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeA")," which described the numbers 1 through 3\n(a ",(0,i.mdx)("a",{parentName:"p",href:"../../types/unions"},"union")," of ",(0,i.mdx)("a",{parentName:"p",href:"../../types/literals"},"literal types"),"), and\na ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeB")," which described the numbers 1 through 5: ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeA")," would be considered\na ",(0,i.mdx)("em",{parentName:"p"},"subtype")," of ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeB"),", because ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeA")," is a subset of ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeB"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type TypeA = 1 | 2 | 3;\ntype TypeB = 1 | 2 | 3 | 4 | 5;\n")),(0,i.mdx)("p",null,"Consider a ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeLetters"),' which described the strings: "A", "B", "C", and a\n',(0,i.mdx)("inlineCode",{parentName:"p"},"TypeNumbers")," which described the numbers: 1, 2, 3. Neither of them would\nbe a subtype of the other, as they each contain a completely different set of\nvalues."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'type TypeLetters = "A" | "B" | "C";\ntype TypeNumbers =  1  |  2  |  3;\n')),(0,i.mdx)("p",null,"Finally, if we had a ",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeA")," which described the numbers 1 through 3, and a\n",(0,i.mdx)("inlineCode",{parentName:"p"},"TypeB")," which described the numbers 3 through 5. Neither of them would be a\nsubtype of the other. Even though they both have 3 and describe numbers, they\neach have some unique items."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type TypeA = 1 | 2 | 3;\ntype TypeB = 3 | 4 | 5;\n")),(0,i.mdx)("h2",{id:"toc-when-are-subtypes-used"},"When are subtypes used?"),(0,i.mdx)("p",null,"Most of the work that Flow does is comparing types against one another."),(0,i.mdx)("p",null,"For example, in order to know if you are calling a function correctly, Flow\nneeds to compare the arguments you are passing with the parameters the\nfunction expects."),(0,i.mdx)("p",null,"This often means figuring out if the value you are passing in is a subtype of\nthe value you are expecting."),(0,i.mdx)("p",null,"So if you write a function that expects the numbers 1 through 5, any subtype of\nthat set will be acceptable."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":9,"startColumn":3,"endLine":9,"endColumn":11,"description":"Cannot call `f` with `fiveOrSix` bound to `param` because number literal `6` [1] is incompatible with union type [2]. [incompatible-call]"}]','[{"startLine":9,"startColumn":3,"endLine":9,"endColumn":11,"description":"Cannot':!0,call:!0,"`f`":!0,with:!0,"`fiveOrSix`":!0,bound:!0,to:!0,"`param`":!0,because:!0,number:!0,literal:!0,"`6`":!0,"[1]":!0,is:!0,incompatible:!0,union:!0,type:!0,"[2].":!0,'[incompatible-call]"}]':!0},"function f(param: 1 | 2 | 3 | 4 | 5) {\n  // ...\n}\n\ndeclare const oneOrTwo: 1 |  2; // Subset of the input parameters type.\ndeclare const fiveOrSix: 5 | 6; // Not a subset of the input parameters type.\n\nf(oneOrTwo); // Works!\nf(fiveOrSix); // Error!\n")),(0,i.mdx)("h2",{id:"toc-subtypes-of-complex-types"},"Subtypes of complex types"),(0,i.mdx)("p",null,"Flow needs to compare more than just sets of primitive values, it also needs to\nbe able to compare objects, functions, and every other type that appears in the\nlanguage."),(0,i.mdx)("h3",{id:"toc-subtypes-of-objects"},"Subtypes of objects"),(0,i.mdx)("p",null,"You can start to compare two objects by their keys. If one object contains all\nthe keys of another object, then it may be a subtype."),(0,i.mdx)("p",null,"For example, if we had an ",(0,i.mdx)("inlineCode",{parentName:"p"},"ObjectA")," which contained the key ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo"),", and an\n",(0,i.mdx)("inlineCode",{parentName:"p"},"ObjectB")," which contained the keys ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"bar"),". Then it's possible that\n",(0,i.mdx)("inlineCode",{parentName:"p"},"ObjectB")," is a subtype of ",(0,i.mdx)("inlineCode",{parentName:"p"},"ObjectA"),", if ",(0,i.mdx)("inlineCode",{parentName:"p"},"ObjectA")," is inexact."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type ObjectA = {foo: string, ...};\ntype ObjectB = {foo: string, bar: number};\n\nlet objectB: ObjectB = {foo: 'test', bar: 42};\nlet objectA: ObjectA = objectB; // Works!\n")),(0,i.mdx)("p",null,"But we also need to compare the types of the values. If both objects had a key\n",(0,i.mdx)("inlineCode",{parentName:"p"},"foo")," but one was a ",(0,i.mdx)("inlineCode",{parentName:"p"},"number")," and the other was a ",(0,i.mdx)("inlineCode",{parentName:"p"},"string"),", then one would not\nbe the subtype of the other."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":5,"startColumn":24,"endLine":5,"endColumn":30,"description":"Cannot assign `objectB` to `objectA` because number [1] is incompatible with string [2] in property `foo`. [incompatible-type]"}]','[{"startLine":5,"startColumn":24,"endLine":5,"endColumn":30,"description":"Cannot':!0,assign:!0,"`objectB`":!0,to:!0,"`objectA`":!0,because:!0,number:!0,"[1]":!0,is:!0,incompatible:!0,with:!0,string:!0,"[2]":!0,in:!0,property:!0,"`foo`.":!0,'[incompatible-type]"}]':!0},"type ObjectA = {foo: string, ...};\ntype ObjectB = {foo: number, bar: number};\n\nlet objectB: ObjectB = { foo: 1, bar: 2 };\nlet objectA: ObjectA = objectB; // Error!\n")),(0,i.mdx)("p",null,"If these values on the object happen to be other objects, we would have to\ncompare those against one another. We need to compare every value\nrecursively until we can decide if we have a subtype or not."),(0,i.mdx)("h3",{id:"toc-subtypes-of-functions"},"Subtypes of functions"),(0,i.mdx)("p",null,"Subtyping rules for functions are more complicated. So far, we've seen that ",(0,i.mdx)("inlineCode",{parentName:"p"},"A"),"\nis a subtype of ",(0,i.mdx)("inlineCode",{parentName:"p"},"B")," if ",(0,i.mdx)("inlineCode",{parentName:"p"},"B")," contains all possible values for ",(0,i.mdx)("inlineCode",{parentName:"p"},"A"),". For functions,\nit's not clear how this relationship would apply. To simplify things, you can think\nof a function type ",(0,i.mdx)("inlineCode",{parentName:"p"},"A")," as being a subtype of a function type ",(0,i.mdx)("inlineCode",{parentName:"p"},"B")," if functions of type\n",(0,i.mdx)("inlineCode",{parentName:"p"},"A")," can be used wherever a function of type ",(0,i.mdx)("inlineCode",{parentName:"p"},"B")," is expected."),(0,i.mdx)("p",null,"Let's say we have a function type and a few functions. Which of the functions can\nbe used safely in code that expects the given function type?"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":7,"startColumn":1,"endLine":7,"endColumn":2,"description":"Cannot cast `f1` to `FuncType` because string literal `C` [1] is incompatible with union type [2] in the return value. [incompatible-cast]"},{"startLine":8,"startColumn":1,"endLine":8,"endColumn":2,"description":"Cannot cast `f2` to `FuncType` because union type [1] is incompatible with number literal `2` [2] in the first parameter. [incompatible-cast]"}]','[{"startLine":7,"startColumn":1,"endLine":7,"endColumn":2,"description":"Cannot':!0,cast:!0,"`f1`":!0,to:!0,"`FuncType`":!0,because:!0,string:!0,literal:!0,"`C`":!0,"[1]":!0,is:!0,incompatible:!0,with:!0,union:!0,type:!0,"[2]":!0,in:!0,the:!0,return:!0,"value.":!0,'[incompatible-cast]"},{"startLine":8,"startColumn":1,"endLine":8,"endColumn":2,"description":"Cannot':!0,"`f2`":!0,number:!0,"`2`":!0,first:!0,"parameter.":!0,'[incompatible-cast]"}]':!0},'type FuncType = (1 | 2) => "A" | "B";\n\ndeclare function f1(1 | 2): "A" | "B" | "C";\ndeclare function f2(1 | null): "A" | "B";\ndeclare function f3(1 | 2 | 3): "A";\n\nf1 as FuncType; // Error\nf2 as FuncType; // Error\nf3 as FuncType; // Works!\n')),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"f1")," can return a value that ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType")," never does, so code that relies on ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType"),"\nmight not be safe if ",(0,i.mdx)("inlineCode",{parentName:"li"},"f1")," is used. Its type is not a subtype of ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"f2")," can't handle all the argument values that ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType")," does, so code that relies on\n",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType")," can't safely use ",(0,i.mdx)("inlineCode",{parentName:"li"},"f2"),". Its type is also not a subtype of ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"f3")," can accept all the argument values that ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType")," does, and only returns\nvalues that ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType")," does, so its type is a subtype of ",(0,i.mdx)("inlineCode",{parentName:"li"},"FuncType"),".")),(0,i.mdx)("p",null,"In general, the function subtyping rule is this: a function type ",(0,i.mdx)("inlineCode",{parentName:"p"},"B")," is a subtype\nof a function type ",(0,i.mdx)("inlineCode",{parentName:"p"},"A")," if and only if ",(0,i.mdx)("inlineCode",{parentName:"p"},"B"),"'s inputs are a superset of ",(0,i.mdx)("inlineCode",{parentName:"p"},"A"),"'s, and ",(0,i.mdx)("inlineCode",{parentName:"p"},"B"),"'s outputs\nare a subset of ",(0,i.mdx)("inlineCode",{parentName:"p"},"A"),"'s. The subtype must accept ",(0,i.mdx)("em",{parentName:"p"},"at least")," the same inputs as its parent,\nand must return ",(0,i.mdx)("em",{parentName:"p"},"at most")," the same outputs."),(0,i.mdx)("p",null,"The decision of which direction to apply the subtyping rule on inputs and outputs is\ngoverned by ",(0,i.mdx)("a",{parentName:"p",href:"../variance"},"variance"),", which is the topic of the next section."))}d.isMDXComponent=!0}}]);