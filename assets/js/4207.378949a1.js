"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[4207],{36588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>m,toc:()=>r});var a=t(58168),o=(t(96540),t(15680));t(60681);const s={title:"Comment Types",slug:"/types/comments"},l=void 0,m={unversionedId:"types/comments",id:"types/comments",title:"Comment Types",description:"Flow supports a comment-based syntax, which makes it possible to use Flow",source:"@site/docs/types/comments.md",sourceDirName:"types",slug:"/types/comments",permalink:"/en/docs/types/comments",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/comments.md",tags:[],version:"current",frontMatter:{title:"Comment Types",slug:"/types/comments"},sidebar:"docsSidebar",previous:{title:"Module Types",permalink:"/en/docs/types/modules"},next:{title:"Types & Expressions",permalink:"/en/docs/lang/types-and-expressions"}},i={},r=[{value:"Comment types syntax",id:"toc-comment-types-syntax",level:2},{value:"Type include comments",id:"toc-comment-type-include",level:3},{value:"Type annotation comments",id:"toc-comment-type-annotation",level:3}],p={toc:r};function d(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Flow supports a comment-based syntax, which makes it possible to use Flow\nwithout having to compile your files."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":13,"startColumn":33,"endLine":13,"endColumn":40,"description":"Cannot call `method` with object literal bound to `value` because array literal [1] is incompatible with string [2] in property `baz`. [incompatible-call]"}]','[{"startLine":13,"startColumn":33,"endLine":13,"endColumn":40,"description":"Cannot':!0,call:!0,"`method`":!0,with:!0,object:!0,literal:!0,bound:!0,to:!0,"`value`":!0,because:!0,array:!0,"[1]":!0,is:!0,incompatible:!0,string:!0,"[2]":!0,in:!0,property:!0,"`baz`.":!0,'[incompatible-call]"}]':!0},'/*::\ntype MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n*/\n\nfunction method(value /*: MyAlias */) /*: boolean */ {\n  return value.bar;\n}\n\nmethod({foo: 1, bar: true, baz: ["oops"]});\n')),(0,o.mdx)("p",null,"These comments allow Flow to work in plain JavaScript files without any\nadditional work."),(0,o.mdx)("h2",{id:"toc-comment-types-syntax"},"Comment types syntax"),(0,o.mdx)("p",null,"There are two primary pieces of the syntax: type includes and type annotations."),(0,o.mdx)("h3",{id:"toc-comment-type-include"},"Type include comments"),(0,o.mdx)("p",null,"If you want to have Flow treat a comment as if it were normal syntax, you can\ndo so by adding a double colon ",(0,o.mdx)("inlineCode",{parentName:"p"},"::")," to the start of the comment:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"/*::\ntype MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n*/\n\nclass MyClass {\n  /*:: prop: string; */\n}\n")),(0,o.mdx)("p",null,"This includes the code into the syntax that Flow sees:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n\nclass MyClass {\n  prop: string;\n}\n")),(0,o.mdx)("p",null,"But JavaScript ignores these comments, so your code is valid JavaScript syntax:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"class MyClass {\n\n}\n")),(0,o.mdx)("p",null,"This syntax is also available in a ",(0,o.mdx)("inlineCode",{parentName:"p"},"flow-include")," form:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"/*flow-include\ntype MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n*/\n\nclass MyClass {\n  /*flow-include prop: string; */\n}\n")),(0,o.mdx)("h3",{id:"toc-comment-type-annotation"},"Type annotation comments"),(0,o.mdx)("p",null,"Instead of typing out a full include every time, you can also use the type\nannotation shorthand with a single colon ",(0,o.mdx)("inlineCode",{parentName:"p"},":")," at the start of the comment."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function method(param /*: string */) /*: number */ {\n  return 1;\n}\n")),(0,o.mdx)("p",null,"This would be the same as including a type annotation inside an include comment."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function method(param /*:: : string */) /*:: : number */ {\n  return 1;\n}\n")),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Note:")," If you want to use optional function parameters you'll need to use\nthe include comment form.")),(0,o.mdx)("hr",null),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Special thanks to"),": ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/jareware"},"Jarno Rantanen")," for\nbuilding ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/jareware/flotate"},"flotate")," and supporting us\nmerging his syntax upstream into Flow.")))}d.isMDXComponent=!0}}]);