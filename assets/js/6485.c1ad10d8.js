"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6485],{16485:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var i=n(58168),a=(n(96540),n(15680));const l={author:"Gabe Levi",hide_table_of_contents:!0},t=void 0,r={permalink:"/blog/2015/12/01/Version-0.19.0",source:"@site/blog/2015-12-01-Version-0.19.0.md",title:"Version-0.19.0",description:"Flow v0.19.0 was deployed today! It has a ton of changes, which the",date:"2015-12-01T00:00:00.000Z",formattedDate:"December 1, 2015",tags:[],hasTruncateMarker:!0,authors:[{name:"Gabe Levi"}],frontMatter:{author:"Gabe Levi",hide_table_of_contents:!0},prevItem:{title:"Version 0.21.0",permalink:"/blog/2016/02/02/Version-0.21.0"},nextItem:{title:"Typing Generators with Flow",permalink:"/blog/2015/11/09/Generators"}},d={authorsImageUrls:[void 0]},s=[{value:"<code>@noflow</code>",id:"noflow",level:3},{value:"Declaration files",id:"declaration-files",level:3},{value:"Order of precedence for lib files",id:"order-of-precedence-for-lib-files",level:3},{value:"Deferred initialization",id:"deferred-initialization",level:3}],m={toc:s};function p(e){let{components:o,...n}=e;return(0,a.mdx)("wrapper",(0,i.A)({},m,n,{components:o,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Flow v0.19.0 was deployed today! It has a ton of changes, which the\n",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flow/blob/master/Changelog.md#v0190"},"Changelog"),"\nsummarizes. The Changelog can be a little concise, though, so here are some\nlonger explanations for some of the changes. Hope this helps!"),(0,a.mdx)("h3",{id:"noflow"},(0,a.mdx)("inlineCode",{parentName:"h3"},"@noflow")),(0,a.mdx)("p",null,"Flow is opt-in by default (you add ",(0,a.mdx)("inlineCode",{parentName:"p"},"@flow")," to a file). However we noticed that\nsometimes people would add Flow annotations to files that were missing ",(0,a.mdx)("inlineCode",{parentName:"p"},"@flow"),".\nOften, these people didn't notice that the file was being ignored by Flow. So\nwe decided to stop allowing Flow syntax in non-Flow files. This is easily fixed\nby adding either ",(0,a.mdx)("inlineCode",{parentName:"p"},"@flow")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"@noflow")," to your file. The former will make the\nfile a Flow file. The latter will tell Flow to completely ignore the file."),(0,a.mdx)("h3",{id:"declaration-files"},"Declaration files"),(0,a.mdx)("p",null,"Files that end with ",(0,a.mdx)("inlineCode",{parentName:"p"},".flow")," are now treated specially. They are the preferred\nprovider of modules. That is if both ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js.flow")," exist, then\nwhen you write ",(0,a.mdx)("inlineCode",{parentName:"p"},"import Foo from './foo'"),", Flow will use the type exported from\n",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js.flow")," rather than ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js"),"."),(0,a.mdx)("p",null,"We imagine two main ways people will use ",(0,a.mdx)("inlineCode",{parentName:"p"},".flow")," files."),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},"As interface files. Maybe you have some library ",(0,a.mdx)("inlineCode",{parentName:"p"},"coolLibrary.js")," that is\nreally hard to type with inline Flow types. You could put\n",(0,a.mdx)("inlineCode",{parentName:"p"},"coolLibrary.js.flow")," next to it and declare the types that ",(0,a.mdx)("inlineCode",{parentName:"p"},"coolLibrary.js"),"\nexports."),(0,a.mdx)("pre",{parentName:"li"},(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"// coolLibrary.js.flow\ndeclare export var coolVar: number;\ndeclare export function coolFunction(): void;\ndeclare export class coolClass {}\n"))),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},"As the original source. Maybe you want to ship the minified, transformed\nversion of ",(0,a.mdx)("inlineCode",{parentName:"p"},"awesomeLibrary.js"),", but people who use ",(0,a.mdx)("inlineCode",{parentName:"p"},"awesomeLibrary.js")," also\nuse Flow. Well you could do something like"),(0,a.mdx)("pre",{parentName:"li"},(0,a.mdx)("code",{parentName:"pre",className:"language-bash"},"cp awesomeLibraryOriginalCode.js awesomeLibrary.js.flow\nbabel awesomeLibraryOriginalCode --out-file awesomeLibrary.js\n")))),(0,a.mdx)("h3",{id:"order-of-precedence-for-lib-files"},"Order of precedence for lib files"),(0,a.mdx)("p",null,"Now your local lib files will override the builtin lib files. Is one of the\nbuiltin flow libs wrong? Send a pull request! But then while you're waiting for\nthe next release, you can use your own definition! The order of precedence is\nas follows:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Any paths supplied on the command line via --lib"),(0,a.mdx)("li",{parentName:"ol"},"The files found in the paths specified in the .flowconfig ",(0,a.mdx)("inlineCode",{parentName:"li"},"[libs]")," (in\nlisting order)"),(0,a.mdx)("li",{parentName:"ol"},"The Flow core library files")),(0,a.mdx)("p",null,"For example, if I want to override the builtin definition of Array and instead\nuse my own version, I could update my ",(0,a.mdx)("inlineCode",{parentName:"p"},".flowconfig")," to contain"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"// .flowconfig\n[libs]\nmyArray.js\n")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"// myArray.js\ndeclare class Array<T> {\n  // Put whatever you like in here!\n}\n")),(0,a.mdx)("h3",{id:"deferred-initialization"},"Deferred initialization"),(0,a.mdx)("p",null,"Previously the following code was an error, because the initialization of\n",(0,a.mdx)("inlineCode",{parentName:"p"},"myString")," happens later. Now Flow is fine with it."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'function foo(someFlag: boolean): string {\n  var myString:string;\n  if (someFlag) {\n    myString = "yup";\n  } else {\n    myString = "nope";\n  }\n  return myString;\n}\n')))}p.isMDXComponent=!0}}]);