"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[5960],{15960:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var n=t(58168),s=(t(96540),t(15680));t(60681);const l={title:"Type Aliases",slug:"/types/aliases"},p=void 0,r={unversionedId:"types/aliases",id:"types/aliases",title:"Type Aliases",description:"When you have complicated types that you want to reuse in multiple places, you",source:"@site/docs/types/aliases.md",sourceDirName:"types",slug:"/types/aliases",permalink:"/en/docs/types/aliases",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/aliases.md",tags:[],version:"current",frontMatter:{title:"Type Aliases",slug:"/types/aliases"},sidebar:"docsSidebar",previous:{title:"Classes",permalink:"/en/docs/types/classes"},next:{title:"Opaque Type Aliases",permalink:"/en/docs/types/opaque-types"}},i={},o=[{value:"Type Alias Syntax",id:"toc-type-alias-syntax",level:2},{value:"Type Alias Generics",id:"toc-type-alias-generics",level:4}],m={toc:o};function d(e){let{components:a,...t}=e;return(0,s.mdx)("wrapper",(0,n.A)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"When you have complicated types that you want to reuse in multiple places, you\ncan alias them in Flow using a ",(0,s.mdx)("strong",{parentName:"p"},"type alias"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type MyObject = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n")),(0,s.mdx)("p",null,"These type aliases can be used anywhere a type can be used."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type MyObject = {\n  // ...\n};\n\nconst val: MyObject = { /* ... */ };\nfunction method(val: MyObject) { /* ... */ }\nclass Foo { constructor(val: MyObject) { /* ... */ } }\n")),(0,s.mdx)("p",null,"Type aliases are just that: aliases. They don't create a ",(0,s.mdx)("em",{parentName:"p"},"different")," type, just another name for one.\nThis means that a type alias is completely interchangeable with the type it is equal to."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type MyNumber = number;\ndeclare const x: MyNumber;\ndeclare function foo(x: number): void;\nfoo(x); // ok, because MyNumber = number\n")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"../opaque-types"},"Opaque type aliases")," offer an alternative for when you don't want to treat the\ntypes as the same."),(0,s.mdx)("h2",{id:"toc-type-alias-syntax"},"Type Alias Syntax"),(0,s.mdx)("p",null,"Type aliases are created using the keyword ",(0,s.mdx)("inlineCode",{parentName:"p"},"type")," followed by its name, an\nequals sign ",(0,s.mdx)("inlineCode",{parentName:"p"},"="),", and a type definition."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"type Alias = Type;\n")),(0,s.mdx)("p",null,"Any type can appear inside a type alias."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type NumberAlias = number;\ntype ObjectAlias = {\n  property: string,\n  method(): number,\n};\ntype UnionAlias = 1 | 2 | 3;\ntype AliasAlias = ObjectAlias;\n")),(0,s.mdx)("h4",{id:"toc-type-alias-generics"},"Type Alias Generics"),(0,s.mdx)("p",null,"Type aliases can also have their own ",(0,s.mdx)("a",{parentName:"p",href:"../generics"},"generics"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type MyObject<A, B, C> = {\n  property: A,\n  method(val: B): C,\n};\n")),(0,s.mdx)("p",null,"Type alias generics are ",(0,s.mdx)("a",{parentName:"p",href:"../generics#toc-parameterized-generics"},"parameterized"),".\nWhen you use a type alias you need to pass parameters for each of its generics."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type MyObject<A, B, C> = {\n  foo: A,\n  bar: B,\n  baz: C,\n};\n\nvar val: MyObject<number, boolean, string> = {\n  foo: 1,\n  bar: true,\n  baz: 'three',\n};\n")))}d.isMDXComponent=!0}}]);