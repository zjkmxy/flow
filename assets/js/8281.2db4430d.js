"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8281],{58281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>i,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=n(58168),s=(n(96540),n(15680));n(60681);const r={title:"Module Types",slug:"/types/modules"},p=void 0,a={unversionedId:"types/modules",id:"types/modules",title:"Module Types",description:"Importing and exporting types",source:"@site/docs/types/modules.md",sourceDirName:"types",slug:"/types/modules",permalink:"/en/docs/types/modules",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/modules.md",tags:[],version:"current",frontMatter:{title:"Module Types",slug:"/types/modules"},sidebar:"docsSidebar",previous:{title:"Utility Types",permalink:"/en/docs/types/utilities"},next:{title:"Comment Types",permalink:"/en/docs/types/comments"}},m={},l=[{value:"Importing and exporting types",id:"toc-importing-and-exporting-types",level:2},{value:"Importing and exporting values as types",id:"toc-importing-and-exporting-values",level:2}],d={toc:l};function i(e){let{components:t,...n}=e;return(0,s.mdx)("wrapper",(0,o.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h2",{id:"toc-importing-and-exporting-types"},"Importing and exporting types"),(0,s.mdx)("p",null,"It is often useful to share types between modules (files).\nIn Flow, you can export type aliases, interfaces, and classes from one file and import them in another."),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},(0,s.mdx)("inlineCode",{parentName:"strong"},"exports.js"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"export default class MyClass {};\nexport type MyObject = { /* ... */ };\nexport interface MyInterface { /* ... */ };\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},(0,s.mdx)("inlineCode",{parentName:"strong"},"imports.js"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"import type MyClass, {MyObject, MyInterface} from './exports';\n")),(0,s.mdx)("blockquote",null,(0,s.mdx)("p",{parentName:"blockquote"},(0,s.mdx)("strong",{parentName:"p"},(0,s.mdx)("em",{parentName:"strong"},"Don't forget to add ",(0,s.mdx)("inlineCode",{parentName:"em"},"@flow")," at the top of your file, otherwise Flow won't report errors")),".")),(0,s.mdx)("h2",{id:"toc-importing-and-exporting-values"},"Importing and exporting values as types"),(0,s.mdx)("p",null,"Flow also supports importing the type of values exported by other modules using ",(0,s.mdx)("a",{parentName:"p",href:"../typeof/"},(0,s.mdx)("inlineCode",{parentName:"a"},"typeof")),"."),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},(0,s.mdx)("inlineCode",{parentName:"strong"},"exports.js"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"const myNumber = 42;\nexport default myNumber;\nexport class MyClass { /* ... */ };\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},(0,s.mdx)("inlineCode",{parentName:"strong"},"imports.js"))),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"import typeof MyNumber from './exports';\nimport typeof {MyClass} from './exports';\n\nconst x: MyNumber = 1; // Works: like using `number`\n")),(0,s.mdx)("p",null,"Just like other type imports, this code can be stripped away by a compiler so\nthat it does not add a runtime dependency on the other module."))}i.isMDXComponent=!0}}]);