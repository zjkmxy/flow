"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[5650],{35650:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=a(58168),t=(a(96540),a(15680));a(60681);const o={title:"Declaration Files",slug:"/declarations",description:"Learn how to write types in .flow files."},l=void 0,r={unversionedId:"declarations/index",id:"declarations/index",title:"Declaration Files",description:"Learn how to write types in .flow files.",source:"@site/docs/declarations/index.md",sourceDirName:"declarations",slug:"/declarations",permalink:"/en/docs/declarations",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/declarations/index.md",tags:[],version:"current",frontMatter:{title:"Declaration Files",slug:"/declarations",description:"Learn how to write types in .flow files."},sidebar:"docsSidebar",previous:{title:"Migrating from legacy patterns",permalink:"/en/docs/enums/migrating-legacy-patterns"},next:{title:"Library Definitions",permalink:"/en/docs/libdefs"}},s={},d=[{value:"What&#39;s a Declaration File?",id:"toc-what-s-a-declaration-file",level:2},{value:"Inlining declarations in regular code",id:"toc-inlining-declarations-in-regular-code",level:2}],m={toc:d};function p(e){let{components:n,...a}=e;return(0,t.mdx)("wrapper",(0,i.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("h2",{id:"toc-what-s-a-declaration-file"},"What's a Declaration File?"),(0,t.mdx)("p",null,"Let's look at a more general, and sometimes more convenient way to\ndeclare types for modules: ",(0,t.mdx)("inlineCode",{parentName:"p"},".flow")," files."),(0,t.mdx)("p",null,"There are two possible use cases, depending on whether an implementation file exists\nor not."),(0,t.mdx)("p",null,"In the first case, the exported types of a module are declared in a ",(0,t.mdx)("em",{parentName:"p"},"declaration\nfile")," ",(0,t.mdx)("inlineCode",{parentName:"p"},"<FILENAME>.flow"),", that is located in the same directory as the corresponding ",(0,t.mdx)("em",{parentName:"p"},"implementation\nfile")," ",(0,t.mdx)("inlineCode",{parentName:"p"},"<FILENAME>"),". The declaration file completely shadows the colocated\nimplementation. In other words, Flow will completely ignore ",(0,t.mdx)("inlineCode",{parentName:"p"},"<FILENAME>")," and just\nread ",(0,t.mdx)("inlineCode",{parentName:"p"},"<FILENAME>.flow")," instead."),(0,t.mdx)("p",null,"In the second case, the implementation file is missing entirely. ",(0,t.mdx)("inlineCode",{parentName:"p"},"<FILENAME>.flow"),"\nis treated as if it is named ",(0,t.mdx)("inlineCode",{parentName:"p"},"<FILENAME>"),"."),(0,t.mdx)("p",null,"Note that the ",(0,t.mdx)("inlineCode",{parentName:"p"},".flow")," extension applies both to ",(0,t.mdx)("inlineCode",{parentName:"p"},".js")," files as well as ",(0,t.mdx)("inlineCode",{parentName:"p"},".json"),"\nones. The corresponding declaration files have extensions ",(0,t.mdx)("inlineCode",{parentName:"p"},".js.flow")," and ",(0,t.mdx)("inlineCode",{parentName:"p"},".json.flow"),",\nrespectively."),(0,t.mdx)("p",null,"Now let's see an example of the first case documented above. Suppose we have the\nfollowing code in a file ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/LookBeforeYouLeap.js"),":"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-js"},'import { isLeapYear } from "./Misc";\nif (isLeapYear("2020")) console.log("Yay!");\n')),(0,t.mdx)("p",null,"and suppose that ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/Misc.js")," has an incompatible implementation of ",(0,t.mdx)("inlineCode",{parentName:"p"},"isLeapYear"),":"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"export function isLeapYear(year: number): boolean {\n  return year % 4 == 0; // yeah, this is approximate\n}\n")),(0,t.mdx)("p",null,"If we now create a declaration file ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/Misc.js.flow"),", the declarations in it\nwill be used instead of the code in ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/Misc.js"),". Let's say we have the\nfollowing declarations in ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/Misc.js.flow"),"."),(0,t.mdx)("blockquote",null,(0,t.mdx)("p",{parentName:"blockquote"},"NOTE: The syntax for declarations in a declaration file is the same as we've seen in\n",(0,t.mdx)("a",{parentName:"p",href:"../libdefs/creation"},"Creating Library Definitions section"),".")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare export function isLeapYear(year: string): boolean;\n")),(0,t.mdx)("p",null,"What do you think will happen?"),(0,t.mdx)("p",null,"Right, the ",(0,t.mdx)("inlineCode",{parentName:"p"},"isLeapYear")," call in ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/LookBeforeYouLeap.js")," will typecheck, since\nthe ",(0,t.mdx)("inlineCode",{parentName:"p"},"year")," parameter expects a ",(0,t.mdx)("inlineCode",{parentName:"p"},"string")," in the declaration file."),(0,t.mdx)("p",null,"As this example shows, declaration files must be written with care: it is up\nto the programmer to ensure they are correct, otherwise they may hide type\nerrors."),(0,t.mdx)("h2",{id:"toc-inlining-declarations-in-regular-code"},"Inlining declarations in regular code"),(0,t.mdx)("p",null,"Sometimes it is useful to make declarations inline, as part of the source of\nan implementation file."),(0,t.mdx)("p",null,"In the following example, say you want to finish writing\nthe function ",(0,t.mdx)("inlineCode",{parentName:"p"},"fooList")," without bothering to mock up its dependencies first: a\nfunction ",(0,t.mdx)("inlineCode",{parentName:"p"},"foo")," that takes a ",(0,t.mdx)("inlineCode",{parentName:"p"},"number")," and returns a ",(0,t.mdx)("inlineCode",{parentName:"p"},"string"),", and a class\n",(0,t.mdx)("inlineCode",{parentName:"p"},"List")," that has a ",(0,t.mdx)("inlineCode",{parentName:"p"},"map")," method. You can do this by including declarations for\n",(0,t.mdx)("inlineCode",{parentName:"p"},"List")," and ",(0,t.mdx)("inlineCode",{parentName:"p"},"foo"),":"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare class List<T> {\n  map<U>(f: (x: T) => U): List<U>;\n}\ndeclare function foo(n: number): string;\n\nfunction fooList(ns: List<number>): List<string> {\n  return ns.map(foo);\n}\n")),(0,t.mdx)("p",null,"Just don't forget to replace the declarations with proper implementations."))}p.isMDXComponent=!0}}]);