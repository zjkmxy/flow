"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[5398],{15398:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var i=t(58168),a=(t(96540),t(15680));t(60681);const l={title:"Literal Types",slug:"/types/literals"},r=void 0,s={unversionedId:"types/literals",id:"types/literals",title:"Literal Types",description:"Flow has primitive types for",source:"@site/docs/types/literals.md",sourceDirName:"types",slug:"/types/literals",permalink:"/en/docs/types/literals",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/literals.md",tags:[],version:"current",frontMatter:{title:"Literal Types",slug:"/types/literals"},sidebar:"docsSidebar",previous:{title:"Primitive Types",permalink:"/en/docs/types/primitives"},next:{title:"Mixed",permalink:"/en/docs/types/mixed"}},o={},m=[],p={toc:m};function c(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Flow has ",(0,a.mdx)("a",{parentName:"p",href:"../primitives"},"primitive types")," for\nliteral values, but can also use literal values as types."),(0,a.mdx)("p",null,"For example, instead of accepting ",(0,a.mdx)("inlineCode",{parentName:"p"},"number")," type, we could accept only the\nliteral value ",(0,a.mdx)("inlineCode",{parentName:"p"},"2"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":5,"startColumn":12,"endLine":5,"endColumn":12,"description":"Cannot call `acceptsTwo` with `3` bound to `value` because number [1] is incompatible with number literal `2` [2]. [incompatible-call]"},{"startLine":6,"startColumn":12,"endLine":6,"endColumn":14,"description":"Cannot call `acceptsTwo` with `\\"2\\"` bound to `value` because string [1] is incompatible with number literal `2` [2]. [incompatible-call]"}]','[{"startLine":5,"startColumn":12,"endLine":5,"endColumn":12,"description":"Cannot':!0,call:!0,"`acceptsTwo`":!0,with:!0,"`3`":!0,bound:!0,to:!0,"`value`":!0,because:!0,number:!0,"[1]":!0,is:!0,incompatible:!0,literal:!0,"`2`":!0,"[2].":!0,'[incompatible-call]"},{"startLine":6,"startColumn":12,"endLine":6,"endColumn":14,"description":"Cannot':!0,'`\\"2\\"`':!0,string:!0,'[incompatible-call]"}]':!0},'function acceptsTwo(value: 2) { /* ... */ }\n\nacceptsTwo(2);   // Works!\n\nacceptsTwo(3);   // Error!\nacceptsTwo("2"); // Error!\n')),(0,a.mdx)("p",null,"You can use primitive values for these types:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Booleans: like ",(0,a.mdx)("inlineCode",{parentName:"li"},"true")," or ",(0,a.mdx)("inlineCode",{parentName:"li"},"false")),(0,a.mdx)("li",{parentName:"ul"},"Numbers: like ",(0,a.mdx)("inlineCode",{parentName:"li"},"42")," or ",(0,a.mdx)("inlineCode",{parentName:"li"},"3.14")),(0,a.mdx)("li",{parentName:"ul"},"Strings: like ",(0,a.mdx)("inlineCode",{parentName:"li"},'"foo"')," or ",(0,a.mdx)("inlineCode",{parentName:"li"},'"bar"')),(0,a.mdx)("li",{parentName:"ul"},"BigInts: like ",(0,a.mdx)("inlineCode",{parentName:"li"},"42n"))),(0,a.mdx)("p",null,"Using these with ",(0,a.mdx)("a",{parentName:"p",href:"../unions"},"union types")," is powerful:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":12,"startColumn":10,"endLine":12,"endColumn":16,"description":"Cannot call `getColor` with `\\"error\\"` bound to `name` because string [1] is incompatible with union type [2]. [incompatible-call]"}]','[{"startLine":12,"startColumn":10,"endLine":12,"endColumn":16,"description":"Cannot':!0,call:!0,"`getColor`":!0,with:!0,'`\\"error\\"`':!0,bound:!0,to:!0,"`name`":!0,because:!0,string:!0,"[1]":!0,is:!0,incompatible:!0,union:!0,type:!0,"[2].":!0,'[incompatible-call]"}]':!0},'function getColor(name: "success" | "warning" | "danger") {\n  switch (name) {\n    case "success" : return "green";\n    case "warning" : return "yellow";\n    case "danger"  : return "red";\n  }\n}\n\ngetColor("success"); // Works!\ngetColor("danger");  // Works!\n\ngetColor("error");   // Error!\n')),(0,a.mdx)("p",null,"Consider using ",(0,a.mdx)("a",{parentName:"p",href:"../../enums"},"Flow Enums")," instead of unions of literal types, if they fit your use-case."))}c.isMDXComponent=!0}}]);