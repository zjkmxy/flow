"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[3269],{73269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>p,metadata:()=>i,toc:()=>r});var a=n(58168),o=(n(96540),n(15680));n(60681);const p={title:"Empty",slug:"/types/empty"},s=void 0,i={unversionedId:"types/empty",id:"types/empty",title:"Empty",description:"The empty type has no values. It is the subtype of all other types (i.e. the bottom type).",source:"@site/docs/types/empty.md",sourceDirName:"types",slug:"/types/empty",permalink:"/en/docs/types/empty",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/empty.md",tags:[],version:"current",frontMatter:{title:"Empty",slug:"/types/empty"},sidebar:"docsSidebar",previous:{title:"Mixed",permalink:"/en/docs/types/mixed"},next:{title:"Any",permalink:"/en/docs/types/any"}},m={},r=[],l={toc:r};function d(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,a.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty")," type has no values. It is the ",(0,o.mdx)("a",{parentName:"p",href:"../../lang/type-hierarchy"},"subtype of all other types")," (i.e. the ",(0,o.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bottom_type"},"bottom type"),").\nIn this way it is the opposite of ",(0,o.mdx)("a",{parentName:"p",href:"../mixed"},(0,o.mdx)("inlineCode",{parentName:"a"},"mixed")),", which is the supertype of all types."),(0,o.mdx)("p",null,"It is not common to annotate your code using ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty"),". However, there are a couple of situations that it might be useful:"),(0,o.mdx)("p",null,"If you have a function that always throws, you can annotate the return as ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty"),", as the function never returns:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function throwIt(msg: string): empty {\n  throw new Error(msg);\n}\n")),(0,o.mdx)("p",null,"You can use a cast to ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty")," to assert that you have refined away all members of a union:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function f(x: 'a' | 'b'): number {\n  switch (x) {\n    case 'a':\n      return 1;\n    case 'b':\n      return 2;\n    default:\n      return (x: empty);\n  }\n}\n")),(0,o.mdx)("p",null,"If you had not checked for all members of the union (for example, changed ",(0,o.mdx)("inlineCode",{parentName:"p"},"x")," to be of type ",(0,o.mdx)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'"),"),\nthen ",(0,o.mdx)("inlineCode",{parentName:"p"},"x")," would no longer be ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"default"),", and Flow would error."),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},"Note: If you want exhaustively checked enums by defualt, without having to cast to ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty"),",\nyou could enable and use ",(0,o.mdx)("a",{parentName:"p",href:"../../enums"},"Flow Enums")," in your project.")),(0,o.mdx)("p",null,"Since ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty")," is the subtype of all types, all operations are permitted on something that has the ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty")," type.\nHowever since no values can be ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty"),', this is "safe", unlike with ',(0,o.mdx)("a",{parentName:"p",href:"../any"},(0,o.mdx)("inlineCode",{parentName:"a"},"any")),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'const str = "hello";\n\nif (typeof str === "string") {\n  (str: string); // Yes it\'s a string\n} else {\n  // Works! Since we will never enter this branch\n  (str: empty);\n  const n: number = str + 1;\n}\n')),(0,o.mdx)("p",null,'We put "safe" in quotes above, as due type safety holes in your code or bugs within Flow itself,\nit is possible to get values which are ',(0,o.mdx)("inlineCode",{parentName:"p"},"empty")," typed."),(0,o.mdx)("p",null,"You can use the ",(0,o.mdx)("a",{parentName:"p",href:"../../cli/coverage/"},"coverage")," command to identify code typed as ",(0,o.mdx)("inlineCode",{parentName:"p"},"empty"),"."))}d.isMDXComponent=!0}}]);