"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[4885],{34885:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>s});var t=a(58168),o=(a(96540),a(15680));a(60681);const l={title:"Creating Library Definitions",slug:"/libdefs/creation"},r=void 0,d={unversionedId:"libdefs/creation",id:"libdefs/creation",title:"Creating Library Definitions",description:"Before spending the time to write your own libdef, we recommend that you look to",source:"@site/docs/libdefs/creation.md",sourceDirName:"libdefs",slug:"/libdefs/creation",permalink:"/en/docs/libdefs/creation",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/libdefs/creation.md",tags:[],version:"current",frontMatter:{title:"Creating Library Definitions",slug:"/libdefs/creation"},sidebar:"docsSidebar",previous:{title:"Library Definitions",permalink:"/en/docs/libdefs"},next:{title:"Error Suppressions",permalink:"/en/docs/errors"}},i={},s=[{value:"Declaring A Global Function",id:"toc-declaring-a-global-function",level:2},{value:"Declaring A Global Class",id:"toc-declaring-a-global-class",level:2},{value:"Declaring A Global Variable",id:"toc-declaring-a-global-variable",level:2},{value:"Declaring A Global Type",id:"toc-declaring-a-global-type",level:2},{value:"Declaring A Global Namespace",id:"toc-declaring-a-global-namespace",level:2},{value:"Declaring A Module",id:"toc-declaring-a-module",level:2},{value:"Declaring An ES Module",id:"toc-declaring-an-es-module",level:4},{value:"Named Exports",id:"toc-named-exports",level:6},{value:"Default Exports",id:"toc-default-exports",level:6},{value:"Declaring A CommonJS Module",id:"toc-declaring-a-commonjs-module",level:4}],m={toc:s};function p(e){let{components:n,...a}=e;return(0,o.mdx)("wrapper",(0,t.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Before spending the time to write your own libdef, we recommend that you look to\nsee if there is already a libdef for the third-party code that you're addressing.\n",(0,o.mdx)("inlineCode",{parentName:"p"},"flow-typed")," is a ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/flowtype/flow-typed/"},"tool and repository"),"\nfor sharing common libdefs within the Flow community -- so it's a good way to\nknock out a good chunk of any public libdefs you might need for your project."),(0,o.mdx)("p",null,"However sometimes there isn't a pre-existing libdef or you have third-party\ncode that isn't public and/or you really just need to write a libdef yourself.\nTo do this you'll start by creating a ",(0,o.mdx)("inlineCode",{parentName:"p"},".js")," file for each libdef you're going to\nwrite and put them in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"/flow-typed")," directory at the root of your project.\nIn these libdef file(s) you'll use a special set of Flow syntax (explained\nbelow) to describe the interfaces of the relevant third-party code."),(0,o.mdx)("h2",{id:"toc-declaring-a-global-function"},"Declaring A Global Function"),(0,o.mdx)("p",null,"To declare a global function that should be accessible throughout your project,\nuse the ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare function")," syntax in a libdef file:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/myLibDef.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare function foo(a: number): string;\n")),(0,o.mdx)("p",null,"This tells Flow that any code within the project can reference the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"foo")," global function, and that the function takes one argument (a ",(0,o.mdx)("inlineCode",{parentName:"p"},"number"),") and\nit returns a ",(0,o.mdx)("inlineCode",{parentName:"p"},"string"),"."),(0,o.mdx)("h2",{id:"toc-declaring-a-global-class"},"Declaring A Global Class"),(0,o.mdx)("p",null,"To declare a global class that should be accessible throughout your project,\nuse the ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare class")," syntax in a libdef file:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/myLibDef.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare class URL {\n  constructor(urlStr: string): URL;\n  toString(): string;\n\n  static compare(url1: URL, url2: URL): boolean;\n}\n")),(0,o.mdx)("p",null,"This tells Flow that any code within the project can reference the ",(0,o.mdx)("inlineCode",{parentName:"p"},"URL")," global\nclass. Note that this class definition does not have any implementation details\n-- it exclusively defines the interface of the class."),(0,o.mdx)("h2",{id:"toc-declaring-a-global-variable"},"Declaring A Global Variable"),(0,o.mdx)("p",null,"To declare a global variable that should be accessible throughout your project,\nuse the ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare var"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare let"),", or ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare const")," syntax in a libdef file:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/myLibDef.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare const PI: number;\n")),(0,o.mdx)("p",null,"This tells Flow that any code within the project can reference the ",(0,o.mdx)("inlineCode",{parentName:"p"},"PI")," global\nvariable -- which, in this case, is a ",(0,o.mdx)("inlineCode",{parentName:"p"},"number"),"."),(0,o.mdx)("h2",{id:"toc-declaring-a-global-type"},"Declaring A Global Type"),(0,o.mdx)("p",null,"To declare a global type that should be accessible throughout your project,\nuse the ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare type")," syntax in a libdef file:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/myLibDef.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare type UserID = number;\n")),(0,o.mdx)("p",null,"This tells Flow that any code within the project can reference the ",(0,o.mdx)("inlineCode",{parentName:"p"},"UserID"),"\nglobal type -- which, in this case, is just an alias for ",(0,o.mdx)("inlineCode",{parentName:"p"},"number"),"."),(0,o.mdx)("h2",{id:"toc-declaring-a-global-namespace"},"Declaring A Global Namespace"),(0,o.mdx)("p",null,"A namespace defines a collection of values and types:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":6,"startColumn":1,"endLine":6,"endColumn":7,"description":"Cannot cast `Foo.bar` to `Baz` because string [1] is incompatible with number [2]. [incompatible-cast]"}]','[{"startLine":6,"startColumn":1,"endLine":6,"endColumn":7,"description":"Cannot':!0,cast:!0,"`Foo.bar`":!0,to:!0,"`Baz`":!0,because:!0,string:!0,"[1]":!0,is:!0,incompatible:!0,with:!0,number:!0,"[2].":!0,'[incompatible-cast]"}]':!0},"declare namespace Foo {\n  declare const bar: string;\n  type Baz = number;\n}\n\nFoo.bar as Foo.Baz; // error\n")),(0,o.mdx)("p",null,"To declare a global namespace that should be accessible throughout your project,\nuse the ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare namespace")," syntax in a libdef file:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/myLibDef.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"declare namespace Foo {\n  declare const bar: string;\n  type Baz = number;\n}\n")),(0,o.mdx)("p",null,"This tells Flow that any code within the project can reference the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Foo")," global\nnamespace."),(0,o.mdx)("p",null,"If a declared namespace only contains type declarations, then the namespace itself\ncan only be used in a type context."),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/myTypeOnlyNamespace.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":5,"startColumn":1,"endLine":5,"endColumn":11,"description":"Cannot use type-only namespace `TypeOnlyFoo` [1] as a value. Type-only namespaces are erased and don\'t exist at runtime. [type-as-value]"}]','[{"startLine":5,"startColumn":1,"endLine":5,"endColumn":11,"description":"Cannot':!0,use:!0,"type-only":!0,namespace:!0,"`TypeOnlyFoo`":!0,"[1]":!0,as:!0,a:!0,"value.":!0,"Type-only":!0,namespaces:!0,are:!0,erased:!0,and:!0,"don't":!0,exist:!0,at:!0,"runtime.":!0,'[type-as-value]"}]':!0},"declare namespace TypeOnlyFoo {\n  type Baz = number;\n}\n\nTypeOnlyFoo; // error\ntype T = TypeOnlyFoo.Baz; // ok\n")),(0,o.mdx)("h2",{id:"toc-declaring-a-module"},"Declaring A Module"),(0,o.mdx)("p",null,"Often, third-party code is organized in terms of modules rather than globals. To\nwrite a libdef that declares the presence of a module you'll want to use the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," syntax:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"declare module \"some-third-party-library\" {\n  // This is where we'll list the module's exported interface(s)\n}\n")),(0,o.mdx)("p",null,"The name specified in quotes after ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," can be any string, but it\nshould correspond to the same string you'd use to ",(0,o.mdx)("inlineCode",{parentName:"p"},"require")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"import")," the\nthird-party module into your project. For defining modules that are accessed via\na relative ",(0,o.mdx)("inlineCode",{parentName:"p"},"require"),"/",(0,o.mdx)("inlineCode",{parentName:"p"},"import")," path, please see the docs on the ",(0,o.mdx)("a",{parentName:"p",href:"../../declarations"},(0,o.mdx)("inlineCode",{parentName:"a"},".flow")," files")),(0,o.mdx)("p",null,"Within the body of a ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," block, you can specify the set of exports\nfor that module. However, before we start talking about exports we have to talk\nabout the two kinds of modules that Flow supports: CommonJS and ES modules."),(0,o.mdx)("p",null,"Flow can handle both CommonJS and ES modules, but there are some relevant\ndifferences between the two that need to be considered when using\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module"),"."),(0,o.mdx)("h4",{id:"toc-declaring-an-es-module"},"Declaring An ES Module"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export"},"ES modules"),"\nhave two kinds of exports: A ",(0,o.mdx)("strong",{parentName:"p"},"named")," export and a ",(0,o.mdx)("strong",{parentName:"p"},"default")," export. Flow supports the ability\nto declare either or both of these kinds of exports within a ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," body as follows:"),(0,o.mdx)("h6",{id:"toc-named-exports"},"Named Exports"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/some-es-module.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'declare module "some-es-module" {\n  // Declares a named "concatPath" export\n  declare export function concatPath(dirA: string, dirB: string): string;\n}\n')),(0,o.mdx)("p",null,"Note that you can also declare other things inside the body of the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module"),", and those things will be scoped to the body of the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," -- ",(0,o.mdx)("strong",{parentName:"p"},"but they will not be exported from the module"),":"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/some-es-module.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'declare module "some-es-module" {\n  // Defines the type of a Path class within this `declare module` body, but\n  // does not export it. It can only be referenced by other things inside the\n  // body of this `declare module`\n  declare class Path {\n    toString(): string;\n  }\n\n  // Declares a named "concatPath" export which returns an instance of the\n  // `Path` class (defined above)\n  declare export function concatPath(dirA: string, dirB: string): Path;\n}\n')),(0,o.mdx)("h6",{id:"toc-default-exports"},"Default Exports"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/some-es-module.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'declare module "some-es-module" {\n  declare class URL {\n    constructor(urlStr: string): URL;\n    toString(): string;\n\n    static compare(url1: URL, url2: URL): boolean;\n  }\n\n  // Declares a default export whose type is `typeof URL`\n  declare export default typeof URL;\n}\n')),(0,o.mdx)("p",null,"It is also possible to declare both ",(0,o.mdx)("strong",{parentName:"p"},"named")," and ",(0,o.mdx)("strong",{parentName:"p"},"default")," exports in the\nsame ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," body."),(0,o.mdx)("h4",{id:"toc-declaring-a-commonjs-module"},"Declaring A CommonJS Module"),(0,o.mdx)("p",null,"CommonJS modules have a single value that is exported (the ",(0,o.mdx)("inlineCode",{parentName:"p"},"module.exports"),"\nvalue). To describe the type of this single value within a ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module"),"\nbody, you'll use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module.exports")," syntax:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/some-commonjs-module.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'declare module "some-commonjs-module" {\n  // The export of this module is an object with a "concatPath" method\n  declare module.exports: {\n    concatPath(dirA: string, dirB: string): string;\n  };\n}\n')),(0,o.mdx)("p",null,"Note that you can also declare other things inside the body of the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module"),", and those things will be scoped to the body of the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module"),", ",(0,o.mdx)("strong",{parentName:"p"},"but they will not be exported from the module"),":"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"flow-typed/some-commonjs-module.js")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'declare module "some-commonjs-module" {\n  // Defines the type of a Path class within this `declare module` body, but\n  // does not export it. It can only be referenced by other things inside the\n  // body of this `declare module`\n  declare class Path {\n    toString(): string;\n  }\n\n  // The "concatPath" function now returns an instance of the `Path` class\n  // (defined above).\n  declare module.exports: {\n    concatPath(dirA: string, dirB: string): Path\n  };\n}\n')),(0,o.mdx)("p",null,"NOTE: Because a given module cannot be both an ES module and a CommonJS module,\nit is an error to mix ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare export [...]")," with\n",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module.exports: ...")," in the same ",(0,o.mdx)("inlineCode",{parentName:"p"},"declare module")," body."))}p.isMDXComponent=!0}}]);