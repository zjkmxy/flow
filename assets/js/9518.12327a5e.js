"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9518],{39518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(58168),o=(t(96540),t(15680));t(60681);const s={title:"Depth Subtyping",slug:"/lang/depth-subtyping"},r=void 0,i={unversionedId:"lang/depth-subtyping",id:"lang/depth-subtyping",title:"Depth Subtyping",description:"Assume we have two classes, which have a subtype relationship using extends:",source:"@site/docs/lang/depth-subtyping.md",sourceDirName:"lang",slug:"/lang/depth-subtyping",permalink:"/en/docs/lang/depth-subtyping",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/lang/depth-subtyping.md",tags:[],version:"current",frontMatter:{title:"Depth Subtyping",slug:"/lang/depth-subtyping"},sidebar:"docsSidebar",previous:{title:"Nominal & Structural Typing",permalink:"/en/docs/lang/nominal-structural"},next:{title:"Width Subtyping",permalink:"/en/docs/lang/width-subtyping"}},p={},l=[],m={toc:l};function d(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Assume we have two ",(0,o.mdx)("a",{parentName:"p",href:"../../types/classes"},"classes"),", which have a subtype relationship using ",(0,o.mdx)("inlineCode",{parentName:"p"},"extends"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"class Person {\n  name: string;\n}\nclass Employee extends Person {\n  department: string;\n}\n")),(0,o.mdx)("p",null,"It's valid to use an ",(0,o.mdx)("inlineCode",{parentName:"p"},"Employee")," instance where a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Person")," instance is expected."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"class Person { name: string }\nclass Employee extends Person { department: string }\n\nconst employee: Employee = new Employee();\nconst person: Person = employee; // OK\n")),(0,o.mdx)("p",null,"However, it is not valid to use an object containing an ",(0,o.mdx)("inlineCode",{parentName:"p"},"Employee")," instance\nwhere an object containing a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Person")," instance is expected."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":5,"startColumn":31,"endLine":5,"endColumn":38,"description":"Cannot assign `employee` to `person` because `Person` [1] is incompatible with `Employee` [2] in property `who`. This property is invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]"}]','[{"startLine":5,"startColumn":31,"endLine":5,"endColumn":38,"description":"Cannot':!0,assign:!0,"`employee`":!0,to:!0,"`person`":!0,because:!0,"`Person`":!0,"[1]":!0,is:!0,incompatible:!0,with:!0,"`Employee`":!0,"[2]":!0,in:!0,property:!0,"`who`.":!0,This:!0,invariantly:!0,"typed.":!0,See:!0,"https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.":!0,'[incompatible-type]"}]':!0},"class Person { name: string }\nclass Employee extends Person { department: string }\n\nconst employee: {who: Employee} = {who: new Employee()};\nconst person: {who: Person} = employee; // Error\n")),(0,o.mdx)("p",null,"This is an error because objects are mutable. The value referenced by the\n",(0,o.mdx)("inlineCode",{parentName:"p"},"employee")," variable is the same as the value referenced by the ",(0,o.mdx)("inlineCode",{parentName:"p"},"person"),"\nvariable."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"person.who = new Person();\n")),(0,o.mdx)("p",null,"If we write into the ",(0,o.mdx)("inlineCode",{parentName:"p"},"who")," property of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"person")," object, we've also changed\nthe value of ",(0,o.mdx)("inlineCode",{parentName:"p"},"employee.who"),", which is explicitly annotated to be an ",(0,o.mdx)("inlineCode",{parentName:"p"},"Employee"),"\ninstance."),(0,o.mdx)("p",null,"If we prevented any code from ever writing a new value to the object through\nthe ",(0,o.mdx)("inlineCode",{parentName:"p"},"person")," variable, it would be safe to use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"employee")," variable. Flow\nprovides a syntax for this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":6,"startColumn":8,"endLine":6,"endColumn":10,"description":"Cannot assign `new Person()` to `person.who` because property `who` is not writable. [cannot-write]"}]','[{"startLine":6,"startColumn":8,"endLine":6,"endColumn":10,"description":"Cannot':!0,assign:!0,"`new":!0,"Person()`":!0,to:!0,"`person.who`":!0,because:!0,property:!0,"`who`":!0,is:!0,not:!0,"writable.":!0,'[cannot-write]"}]':!0},"class Person { name: string }\nclass Employee extends Person { department: string }\n\nconst employee: {who: Employee} = {who: new Employee()};\nconst person: {+who: Person} = employee; // OK\nperson.who = new Person(); // Error!\n")),(0,o.mdx)("p",null,"The plus sign ",(0,o.mdx)("inlineCode",{parentName:"p"},"+")," indicates that the ",(0,o.mdx)("inlineCode",{parentName:"p"},"who")," property is ",(0,o.mdx)("a",{parentName:"p",href:"../variance/#toc-covariance"},"covariant"),".\nUsing a covariant property allows us to use objects which have subtype-compatible\nvalues for that property. By default, object properties are invariant, which allow\nboth reads and writes, but are more restrictive in the values they accept."),(0,o.mdx)("p",null,"Read more about ",(0,o.mdx)("a",{parentName:"p",href:"../variance/"},"property variance"),"."))}d.isMDXComponent=!0}}]);