"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[583],{40583:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>s});var o=i(58168),t=(i(96540),i(15680));i(60681);const r={title:".flowconfig [ignore]",slug:"/config/ignore"},l=void 0,a={unversionedId:"config/ignore",id:"config/ignore",title:".flowconfig [ignore]",description:"The [ignore] section in a .flowconfig file tells Flow to ignore files",source:"@site/docs/config/ignore.md",sourceDirName:"config",slug:"/config/ignore",permalink:"/en/docs/config/ignore",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/config/ignore.md",tags:[],version:"current",frontMatter:{title:".flowconfig [ignore]",slug:"/config/ignore"},sidebar:"docsSidebar",previous:{title:".flowconfig [include]",permalink:"/en/docs/config/include"},next:{title:".flowconfig [untyped]",permalink:"/en/docs/config/untyped"}},d={},s=[{value:"Exclusions",id:"toc-ignore-exclusions",level:3}],m={toc:s};function p(e){let{components:n,...i}=e;return(0,t.mdx)("wrapper",(0,o.A)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("p",null,"The ",(0,t.mdx)("inlineCode",{parentName:"p"},"[ignore]")," section in a ",(0,t.mdx)("inlineCode",{parentName:"p"},".flowconfig")," file tells Flow to ignore files\nmatching the specified regular expressions when type checking your code. By\ndefault, nothing is ignored."),(0,t.mdx)("p",null,"Things to keep in mind:"),(0,t.mdx)("ol",null,(0,t.mdx)("li",{parentName:"ol"},"These are ",(0,t.mdx)("a",{parentName:"li",href:"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html#TYPEregexp"},"OCaml regular   expressions"),"."),(0,t.mdx)("li",{parentName:"ol"},"These regular expressions match against absolute paths. They probably should\nstart with ",(0,t.mdx)("inlineCode",{parentName:"li"},".*")),(0,t.mdx)("li",{parentName:"ol"},"Ignores are processed AFTER includes. If you both include and ignore a file\nit will be ignored.")),(0,t.mdx)("p",null,"An example ",(0,t.mdx)("inlineCode",{parentName:"p"},"[ignore]")," section might look like:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"[ignore]\n.*/__tests__/.*\n.*/src/\\(foo\\|bar\\)/.*\n.*\\.ignore\\.js\n")),(0,t.mdx)("p",null,"This ",(0,t.mdx)("inlineCode",{parentName:"p"},"[ignore]")," section will ignore:"),(0,t.mdx)("ol",null,(0,t.mdx)("li",{parentName:"ol"},"Any file or directory under a directory named ",(0,t.mdx)("inlineCode",{parentName:"li"},"__tests__")),(0,t.mdx)("li",{parentName:"ol"},"Any file or directory under ",(0,t.mdx)("inlineCode",{parentName:"li"},".*/src/foo")," or under ",(0,t.mdx)("inlineCode",{parentName:"li"},".*/src/bar")),(0,t.mdx)("li",{parentName:"ol"},"Any file that ends with the extension ",(0,t.mdx)("inlineCode",{parentName:"li"},".ignore.js"))),(0,t.mdx)("p",null,"You may use the ",(0,t.mdx)("inlineCode",{parentName:"p"},"<PROJECT_ROOT>")," placeholder in your regular expressions.\nAt runtime, Flow will treat the placeholder as if it were the absolute\npath to the project's root directory. This is useful for writing regular\nexpressions that are relative rather than absolute."),(0,t.mdx)("p",null,"For example, you can write:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"[ignore]\n<PROJECT_ROOT>/__tests__/.*\n")),(0,t.mdx)("p",null,"Which would ignore any file or directory under the directory named ",(0,t.mdx)("inlineCode",{parentName:"p"},"__tests__/"),"\nwithin the project root. However, unlike the previous example's\n",(0,t.mdx)("inlineCode",{parentName:"p"},".*/__tests__/.*"),", it would NOT ignore files or directories under other\ndirectories named ",(0,t.mdx)("inlineCode",{parentName:"p"},"__tests__/"),", like ",(0,t.mdx)("inlineCode",{parentName:"p"},"src/__tests__/"),"."),(0,t.mdx)("h3",{id:"toc-ignore-exclusions"},"Exclusions"),(0,t.mdx)("p",null,'Sometimes you may want to ignore all files inside a directory with the exception of a few. An optional prefix "!" which negates the pattern may help. With this, any matching file excluded by a previous pattern will become included again.'),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"[ignore]\n<PROJECT_ROOT>/node_modules/.*\n!<PROJECT_ROOT>/node_modules/not-ignored-package-A/.*\n!<PROJECT_ROOT>/node_modules/not-ignored-package-B/.*\n")))}p.isMDXComponent=!0}}]);