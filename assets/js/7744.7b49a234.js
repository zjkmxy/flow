"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7744],{37744:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var t=r(58168),a=(r(96540),r(15680));r(60681);const s={title:"Render Types",slug:"/react/render-types"},o=void 0,d={unversionedId:"react/render-types",id:"react/render-types",title:"Render Types",description:"Some component libraries or design systems may want to restrict how components may be composed.",source:"@site/docs/react/render-types.md",sourceDirName:"react",slug:"/react/render-types",permalink:"/en/docs/react/render-types",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/react/render-types.md",tags:[],version:"current",frontMatter:{title:"Render Types",slug:"/react/render-types"},sidebar:"docsSidebar",previous:{title:"Higher-order Components",permalink:"/en/docs/react/hoc"},next:{title:"Type Reference",permalink:"/en/docs/react/types"}},i={},m=[{value:"Basic Behavior",id:"basic-behavior",level:2},{value:"Integrating with a design system",id:"integrating-with-a-design-system",level:2},{value:"Rendering Optional Elements",id:"rendering-optional-elements",level:2},{value:"Rendering Lists",id:"rendering-lists",level:2},{value:"Transparent Components",id:"transparent-components",level:2},{value:"Interop with non-Component-Syntax components",id:"interop-with-non-component-syntax-components",level:2},{value:"Subtyping Behavior",id:"subtyping-behavior",level:2}],c={toc:m};function l(e){let{components:n,...r}=e;return(0,a.mdx)("wrapper",(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Some component libraries or design systems may want to restrict how components may be composed.\nFor example, a Menu should only ever render MenuItems as children. Render types are a built-in way to support\nthese constraints while still affording users rich flexibility in how they use those components."),(0,a.mdx)("h2",{id:"basic-behavior"},"Basic Behavior"),(0,a.mdx)("p",null,"A component can declare what it renders using the renders keyword:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent Header(size: string, color: string) { return <div /> }\n\ncomponent LargeHeader(color: string) renders Header {\n  return <Header size=\"large\" color={color} />; // Ok!\n}\n")),(0,a.mdx)("p",null,"When you declare that your component renders some specific element, you can return any component that eventually renders that component in its renders chain:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'import * as React from \'react\';\n\ncomponent Header(size: string, color: string) { return <div /> }\n\ncomponent LargeHeader(color: string) renders Header {\n  return <Header size="large" color={color} />;\n}\n\ncomponent LargeBlueHeader() renders Header {\n  // You could also use `renders LargeHeader` above\n  return <LargeHeader color="blue" />;\n}\n')),(0,a.mdx)("p",null,"Components can specify props that render specific elements:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent Header(size: string, color: string, message: string) {\n  return <h1 style={{color}}>{message}</h1>;\n}\n\ncomponent Layout(header: renders Header) {\n  return (\n    <div>\n      {header}\n      <section>Hi</section>\n    </div>\n  );\n}\n")),(0,a.mdx)("p",null,"And you can pass an element of either Header, or an element of a component that renders ",(0,a.mdx)("inlineCode",{parentName:"p"},"Header"),", to that prop:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"<Layout header={<LargeBlueHeader />} />;\n")),(0,a.mdx)("p",null,"You cannot pass a component that does not render a header to a render type expecting a header:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":15,"startColumn":17,"endLine":15,"endColumn":26,"description":"Cannot create `Layout` element because `Footer` element [1] does not render `Header` [2] in property `header`. [incompatible-type]"}]','[{"startLine":15,"startColumn":17,"endLine":15,"endColumn":26,"description":"Cannot':!0,create:!0,"`Layout`":!0,element:!0,because:!0,"`Footer`":!0,"[1]":!0,does:!0,not:!0,render:!0,"`Header`":!0,"[2]":!0,in:!0,property:!0,"`header`.":!0,'[incompatible-type]"}]':!0},"import * as React from 'react';\n\ncomponent Footer() {\n  return <footer />;\n}\n\ncomponent Header(size: string, color: string, message: string) {\n  return <h1 style={{color}}>{message}</h1>;\n}\n\ncomponent Layout(header: renders Header) {\n  return <div>{header}</div>;\n}\n\n<Layout header={<Footer />} />; // ERROR Footer does not render Header\n")),(0,a.mdx)("h2",{id:"integrating-with-a-design-system"},"Integrating with a design system"),(0,a.mdx)("p",null,"Render types are designed to make integrating with a design system simple. If a prop in the design system component expects a render type, you can copy/paste that type onto your component to integrate with the design system:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent Header() {\n  return <h1>Header!</h1>;\n}\n\ncomponent Layout(header: renders Header) {\n  return <div>{header}</div>;\n}\n\n// Copy-paste the header props' type!\ncomponent ProductHeader() renders Header {\n  // We must return a value that renders a Header to satisfy the signature\n  return <Header />;\n}\n\n// And now you can integrate with the design system!\n<Layout header={<ProductHeader />} />; // OK!\n")),(0,a.mdx)("h2",{id:"rendering-optional-elements"},"Rendering Optional Elements"),(0,a.mdx)("p",null,"You may want to describe a component that can take a child that may eventually render an element or nothing. You can use a specialized render type variant ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders?")," to achieve this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent DesignSystemCardFooter() {\n  return <div>Footer Content</div>;\n}\n\ncomponent DesignSystemCard(\n  children: React.Node,\n  footer: renders? DesignSystemCardFooter,\n) {\n  return <div>{children}{footer}</div>;\n}\n\n// With these definitions, all of the following work:\n\n<DesignSystemCard footer={<DesignSystemCardFooter />}>Card</DesignSystemCard>;\n<DesignSystemCard footer={null}>Card</DesignSystemCard>;\n<DesignSystemCard footer={undefined}>Card</DesignSystemCard>;\n<DesignSystemCard footer={false}>Card</DesignSystemCard>;\n\ncomponent ProductFooter(hasFooter?: boolean) renders? DesignSystemCardFooter {\n  return hasFooter && <DesignSystemCardFooter />;\n}\n\n<DesignSystemCard footer={<ProductFooter />}>Card</DesignSystemCard>;\n")),(0,a.mdx)("h2",{id:"rendering-lists"},"Rendering Lists"),(0,a.mdx)("p",null,"You may want to describe a component that can take any amount of children that render a specific element as props. You can use a specialized render type variant ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders*")," to achieve this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent DesignSystemMenuItem() {\n  return <li>Menu Item</li>;\n}\n\ncomponent DesignSystemMenu(\n  children: renders* DesignSystemMenuItem,\n) {\n  return <ul>{children}</ul>\n}\n\n// With these definitions, all of the following work:\n\nconst menu1 = (\n  <DesignSystemMenu>\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n\nconst menu2 = (\n  <DesignSystemMenu>\n    <DesignSystemMenuItem />\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n\nconst menu3 = (\n  <DesignSystemMenu>\n    {[\n      <DesignSystemMenuItem />,\n      <DesignSystemMenuItem />,\n    ]}\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n\ncomponent ProductMenuItem() renders DesignSystemMenuItem {\n  return <DesignSystemMenuItem />;\n}\n\nconst menu4 = (\n  <DesignSystemMenu>\n    {[\n      <ProductMenuItem />,\n      <DesignSystemMenuItem />,\n    ]}\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n")),(0,a.mdx)("h2",{id:"transparent-components"},"Transparent Components"),(0,a.mdx)("p",null,'Components can be "transparent":'),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent TransparentComponent<T: React.Node>(children: T) renders T {\n  // .. do something\n  return children;\n}\n\ncomponent Header(text: string) {\n  return <h1>{text}</h1>;\n}\ncomponent InstagramHeader() renders Header {\n  return <Header text=\"Instagram\" />;\n}\ncomponent Layout(\n  header: renders Header,\n) {\n  return <div>{header}</div>;\n}\n\ncomponent Page() {\n  const wrappedHeader = <TransparentComponent><InstagramHeader /></TransparentComponent>\n  return <Layout header={wrappedHeader} />; // Ok!\n}\n")),(0,a.mdx)("h2",{id:"interop-with-non-component-syntax-components"},"Interop with non-Component-Syntax components"),(0,a.mdx)("p",null,"You can use ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders")," to annotate function components as well:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent Header(text: string) {\n  return <h1>{text}</h1>;\n}\ncomponent InstagramHeader() renders Header {\n  return <Header text=\"Instagram\" />;\n}\ncomponent Layout(\n  header: renders Header,\n) {\n  return <div>{header}</div>;\n}\n\nfunction FunctionHeader(): renders Header {\n  return <InstagramHeader />;\n}\n\nfunction InstagramPage() {\n  return <Layout header={<FunctionHeader />} />; // OK!\n}\n")),(0,a.mdx)("h2",{id:"subtyping-behavior"},"Subtyping Behavior"),(0,a.mdx)("p",null,"All render types are subtypes of ",(0,a.mdx)("inlineCode",{parentName:"p"},"React.Node"),", and only ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders Foo")," is subtype of ",(0,a.mdx)("inlineCode",{parentName:"p"},"React.MixedElement"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":16,"startColumn":1,"endLine":16,"endColumn":18,"description":"Cannot cast `rendersMaybeHeader` to `MixedElement` because renders? `Header` [1] is incompatible with `React.Element` [2]. [incompatible-cast]"},{"startLine":17,"startColumn":1,"endLine":17,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to `MixedElement` because renders* `Header` [1] is incompatible with `React.Element` [2]. [incompatible-cast]"}]','[{"startLine":16,"startColumn":1,"endLine":16,"endColumn":18,"description":"Cannot':!0,cast:!0,"`rendersMaybeHeader`":!0,to:!0,"`MixedElement`":!0,because:!0,"renders?":!0,"`Header`":!0,"[1]":!0,is:!0,incompatible:!0,with:!0,"`React.Element`":!0,"[2].":!0,'[incompatible-cast]"},{"startLine":17,"startColumn":1,"endLine":17,"endColumn":17,"description":"Cannot':!0,"`rendersHeaderList`":!0,"renders*":!0,'[incompatible-cast]"}]':!0},"import * as React from 'react';\n\ncomponent Header() {\n return <h1>Hello Header!</h1>;\n}\n\ndeclare const rendersHeader: renders Header;\ndeclare const rendersMaybeHeader: renders? Header;\ndeclare const rendersHeaderList: renders* Header;\n\nrendersHeader as React.Node;\nrendersMaybeHeader as React.Node;\nrendersHeaderList as React.Node;\n\nrendersHeader as React.MixedElement;\nrendersMaybeHeader as React.MixedElement; // ERROR!\nrendersHeaderList as React.MixedElement; // ERROR!\n")),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"renders Foo")," is a subtype of ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders? Foo"),", and ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders? Foo")," is a subtype of ",(0,a.mdx)("inlineCode",{parentName:"p"},"renders* Foo"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":15,"startColumn":1,"endLine":15,"endColumn":18,"description":"Cannot cast `rendersMaybeHeader` to renders `Header` because a value that renders nothing [1] does not render `Header` [2]. [incompatible-cast]"},{"startLine":16,"startColumn":1,"endLine":16,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to renders `Header` because `$ReadOnlyArray` [1] does not render `Header` [2]. [incompatible-cast]"},{"startLine":16,"startColumn":1,"endLine":16,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to renders `Header` because a value that renders nothing [1] does not render `Header` [2]. [incompatible-cast]"},{"startLine":17,"startColumn":1,"endLine":17,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to renders? `Header` because `$ReadOnlyArray` [1] does not render `Header` [2]. [incompatible-cast]"}]','[{"startLine":15,"startColumn":1,"endLine":15,"endColumn":18,"description":"Cannot':!0,cast:!0,"`rendersMaybeHeader`":!0,to:!0,renders:!0,"`Header`":!0,because:!0,a:!0,value:!0,that:!0,nothing:!0,"[1]":!0,does:!0,not:!0,render:!0,"[2].":!0,'[incompatible-cast]"},{"startLine":16,"startColumn":1,"endLine":16,"endColumn":17,"description":"Cannot':!0,"`rendersHeaderList`":!0,"`$ReadOnlyArray`":!0,'[incompatible-cast]"},{"startLine":17,"startColumn":1,"endLine":17,"endColumn":17,"description":"Cannot':!0,"renders?":!0,'[incompatible-cast]"}]':!0},"import * as React from 'react';\n\ncomponent Header() {\n return <h1>Hello Header!</h1>;\n}\n\ndeclare const rendersHeader: renders Header;\ndeclare const rendersMaybeHeader: renders? Header;\ndeclare const rendersHeaderList: renders* Header;\n\nrendersHeader as renders? Header;\nrendersHeader as renders* Header;\nrendersMaybeHeader as renders* Header;\n\nrendersMaybeHeader as renders Header; // ERROR\nrendersHeaderList as renders Header; // ERROR\nrendersHeaderList as renders? Header; // ERROR\n")))}l.isMDXComponent=!0}}]);