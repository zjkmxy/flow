"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2672],{92672:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=t(58168),l=(t(96540),t(15680));t(60681);const a={title:"Lazy Mode",slug:"/lang/lazy-modes"},s=void 0,i={unversionedId:"lang/lazy-modes",id:"lang/lazy-modes",title:"Lazy Mode",description:"By default, the Flow server will typecheck all your code. This way it can answer",source:"@site/docs/lang/lazy-modes.md",sourceDirName:"lang",slug:"/lang/lazy-modes",permalink:"/en/docs/lang/lazy-modes",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/lang/lazy-modes.md",tags:[],version:"current",frontMatter:{title:"Lazy Mode",slug:"/lang/lazy-modes"},sidebar:"docsSidebar",previous:{title:"Type Refinements",permalink:"/en/docs/lang/refinements"},next:{title:"File Signatures (Types-First)",permalink:"/en/docs/lang/types-first"}},r={},d=[{value:"Classifying Files",id:"toc-classifying-files",level:2},{value:"Choosing Focused Files",id:"toc-choosing-focused-files",level:2},{value:"Using Lazy Mode",id:"toc-using-lazy-mode",level:2},{value:"Forcing Flow to Treat a File as Focused",id:"toc-forcing-flow-to-treat-a-file-as-focused",level:2}],c={toc:d};function h(e){let{components:o,...t}=e;return(0,l.mdx)("wrapper",(0,n.A)({},c,t,{components:o,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,'By default, the Flow server will typecheck all your code. This way it can answer\nquestions like "are there any Flow errors anywhere in my code". This is very\nuseful for tooling, like a continuous integration hook which prevents code\nchanges which introduce Flow errors.'),(0,l.mdx)("p",null,"However, sometimes a Flow user might not care about all the code. If they are\nediting a file ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo.js"),", they might only want Flow to typecheck the subset of\nthe repository needed to answer questions about ",(0,l.mdx)("inlineCode",{parentName:"p"},"foo.js"),". Since Flow would only\ncheck a smaller number of files, this would be faster. This is the motivation\nbehind Flow's lazy mode."),(0,l.mdx)("h2",{id:"toc-classifying-files"},"Classifying Files"),(0,l.mdx)("p",null,"Lazy mode classifes your code into four categories:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("strong",{parentName:"li"},"Focused files"),". These are the files which the user cares about."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("strong",{parentName:"li"},"Dependent files"),". These are the files which depend on the focused files.\nChanges to the focused files might cause type errors in the dependent files."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("strong",{parentName:"li"},"Dependency files"),". These are the files which are needed in order to\ntypecheck the focused or dependent files."),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("strong",{parentName:"li"},"Unchecked files"),". All other files.")),(0,l.mdx)("p",null,"Lazy mode will still find all the JavaScript files and parse them. But it won't\ntypecheck the unchecked files."),(0,l.mdx)("h2",{id:"toc-choosing-focused-files"},"Choosing Focused Files"),(0,l.mdx)("p",null,'Flow will focus files when they change on disk, using Flow\'s built-in file watcher\n("dfind") or Watchman.'),(0,l.mdx)("p",null,'So, all files that change while Flow is running will be focused. But what about\nfiles that change when Flow is not running? If you\'re using Git or Mercurial,\nFlow will ask it for all of the files that have changed since the mergebase\nwith "master" (the common ancestor of the current commit and the master branch).'),(0,l.mdx)("p",null,'If you\'re not using "master" (e.g. "main" instead), you can change this with\nthe ',(0,l.mdx)("inlineCode",{parentName:"p"},"file_watcher.mergebase_with"),' config. If you\'re working from a clone, you\nmight want to set this to "origin/master" (for Git), which will focus all files\nthat have changed locally, even if you commit to your local "master" branch.'),(0,l.mdx)("p",null,"The net result is that Flow will find the same errors in lazy mode as in a full\ncheck, so long as there are no errors upstream. For example, if your CI ensures\nthat there are no errors in \"master,\" then it's redundant for Flow to check all\nof the unchanged files for errors that can't exist."),(0,l.mdx)("h2",{id:"toc-using-lazy-mode"},"Using Lazy Mode"),(0,l.mdx)("p",null,"To enable lazy mode, set ",(0,l.mdx)("inlineCode",{parentName:"p"},"lazy_mode=true")," in the ",(0,l.mdx)("inlineCode",{parentName:"p"},".flowconfig"),"."),(0,l.mdx)("p",null,"To start Flow in lazy mode manually, run"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-bash"},"flow start --lazy-mode true\n")),(0,l.mdx)("h2",{id:"toc-forcing-flow-to-treat-a-file-as-focused"},"Forcing Flow to Treat a File as Focused"),(0,l.mdx)("p",null,"You can force Flow to treat one or more files as focused from the CLI."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-bash"},"flow force-recheck --focus path/to/A.js path/to/B.js\n")))}h.isMDXComponent=!0}}]);