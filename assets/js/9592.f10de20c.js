"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9592],{39592:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=e(58168),a=(e(96540),e(15680));e(60681);const i={title:"Type Annotations",slug:"/types",description:"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more."},s=void 0,r={unversionedId:"types/index",id:"types/index",title:"Type Annotations",description:"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more.",source:"@site/docs/types/index.md",sourceDirName:"types",slug:"/types",permalink:"/en/docs/types",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/index.md",tags:[],version:"current",frontMatter:{title:"Type Annotations",slug:"/types",description:"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more."},sidebar:"docsSidebar",previous:{title:"FAQ",permalink:"/en/docs/faq"},next:{title:"Primitive Types",permalink:"/en/docs/types/primitives"}},l={},c=[],d={toc:c};function m(n){let{components:t,...e}=n;return(0,a.mdx)("wrapper",(0,o.A)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Adding type annotations is an important part of your interaction with Flow."),(0,a.mdx)("p",null,"Flow has a powerful ability to infer the types of your programs. The majority\nFor example, you don't have to produce annotations for common patterns like ",(0,a.mdx)("inlineCode",{parentName:"p"},"Array.map"),":"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'["foo", "bar"].map(s => ( // s is inferred to have type string\n  s.length\n));\n')),(0,a.mdx)("p",null,"Still, there are places where you'll want to add types."),(0,a.mdx)("p",null,"Imagine the following ",(0,a.mdx)("inlineCode",{parentName:"p"},"concat")," function for concatenating two strings together."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":1,"startColumn":17,"endLine":1,"endColumn":17,"description":"Missing an annotation on `a`. [missing-local-annot]"},{"startLine":1,"startColumn":20,"endLine":1,"endColumn":20,"description":"Missing an annotation on `b`. [missing-local-annot]"}]','[{"startLine":1,"startColumn":17,"endLine":1,"endColumn":17,"description":"Missing':!0,an:!0,annotation:!0,on:!0,"`a`.":!0,'[missing-local-annot]"},{"startLine":1,"startColumn":20,"endLine":1,"endColumn":20,"description":"Missing':!0,"`b`.":!0,'[missing-local-annot]"}]':!0},"function concat(a, b) {\n  return a + b;\n}\n")),(0,a.mdx)("p",null,"You need to add annotations on parameters of ",(0,a.mdx)("inlineCode",{parentName:"p"},"concat"),", so that Flow can type\ncheck its body. Now you'll get a warning from Flow if you are calling this\nfunction with unexpected types."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":6,"startColumn":8,"endLine":6,"endColumn":8,"description":"Cannot call `concat` with `1` bound to `a` because number [1] is incompatible with string [2]. [incompatible-call]"},{"startLine":6,"startColumn":11,"endLine":6,"endColumn":11,"description":"Cannot call `concat` with `2` bound to `b` because number [1] is incompatible with string [2]. [incompatible-call]"}]','[{"startLine":6,"startColumn":8,"endLine":6,"endColumn":8,"description":"Cannot':!0,call:!0,"`concat`":!0,with:!0,"`1`":!0,bound:!0,to:!0,"`a`":!0,because:!0,number:!0,"[1]":!0,is:!0,incompatible:!0,string:!0,"[2].":!0,'[incompatible-call]"},{"startLine":6,"startColumn":11,"endLine":6,"endColumn":11,"description":"Cannot':!0,"`2`":!0,"`b`":!0,'[incompatible-call]"}]':!0},'function concat(a: string, b: string) {\n  return a + b;\n}\n\nconcat("A", "B"); // Works!\nconcat(1, 2); // Error!\n')),(0,a.mdx)("p",null,"This guide will teach you the syntax and semantics of all the different types\nyou can have in Flow."))}m.isMDXComponent=!0}}]);