"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1543],{81543:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var n=t(58168),a=(t(96540),t(15680));const l={author:"Gabe Levi",hide_table_of_contents:!0},i=void 0,r={permalink:"/blog/2015/12/01/Version-0.19.0",source:"@site/blog/2015-12-01-Version-0.19.0.md",title:"Version-0.19.0",description:"Flow v0.19.0 was deployed today! It has a ton of changes, which the",date:"2015-12-01T00:00:00.000Z",formattedDate:"December 1, 2015",tags:[],hasTruncateMarker:!0,authors:[{name:"Gabe Levi"}],frontMatter:{author:"Gabe Levi",hide_table_of_contents:!0},prevItem:{title:"Version 0.21.0",permalink:"/blog/2016/02/02/Version-0.21.0"},nextItem:{title:"Typing Generators with Flow",permalink:"/blog/2015/11/09/Generators"}},d={authorsImageUrls:[void 0]},s=[{value:"<code>@noflow</code>",id:"noflow",level:3},{value:"Declaration files",id:"declaration-files",level:3}],m={toc:s};function p(e){let{components:o,...t}=e;return(0,a.mdx)("wrapper",(0,n.A)({},m,t,{components:o,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Flow v0.19.0 was deployed today! It has a ton of changes, which the\n",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flow/blob/master/Changelog.md#v0190"},"Changelog"),"\nsummarizes. The Changelog can be a little concise, though, so here are some\nlonger explanations for some of the changes. Hope this helps!"),(0,a.mdx)("h3",{id:"noflow"},(0,a.mdx)("inlineCode",{parentName:"h3"},"@noflow")),(0,a.mdx)("p",null,"Flow is opt-in by default (you add ",(0,a.mdx)("inlineCode",{parentName:"p"},"@flow")," to a file). However we noticed that\nsometimes people would add Flow annotations to files that were missing ",(0,a.mdx)("inlineCode",{parentName:"p"},"@flow"),".\nOften, these people didn't notice that the file was being ignored by Flow. So\nwe decided to stop allowing Flow syntax in non-Flow files. This is easily fixed\nby adding either ",(0,a.mdx)("inlineCode",{parentName:"p"},"@flow")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"@noflow")," to your file. The former will make the\nfile a Flow file. The latter will tell Flow to completely ignore the file."),(0,a.mdx)("h3",{id:"declaration-files"},"Declaration files"),(0,a.mdx)("p",null,"Files that end with ",(0,a.mdx)("inlineCode",{parentName:"p"},".flow")," are now treated specially. They are the preferred\nprovider of modules. That is if both ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js.flow")," exist, then\nwhen you write ",(0,a.mdx)("inlineCode",{parentName:"p"},"import Foo from './foo'"),", Flow will use the type exported from\n",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js.flow")," rather than ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo.js"),"."),(0,a.mdx)("p",null,"We imagine two main ways people will use ",(0,a.mdx)("inlineCode",{parentName:"p"},".flow")," files."))}p.isMDXComponent=!0}}]);