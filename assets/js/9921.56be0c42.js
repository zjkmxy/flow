"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9921],{29921:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>m,toc:()=>c});var t=o(58168),p=(o(96540),o(15680));o(60681);const r={title:"Component Types",slug:"/react/component-types"},a=void 0,m={unversionedId:"react/component-types",id:"react/component-types",title:"Component Types",description:"Component Types are only available in Flow v0.243.0+. If you are on an older version, please use React.AbstractComponent",source:"@site/docs/react/component-types.md",sourceDirName:"react",slug:"/react/component-types",permalink:"/en/docs/react/component-types",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/react/component-types.md",tags:[],version:"current",frontMatter:{title:"Component Types",slug:"/react/component-types"},sidebar:"docsSidebar",previous:{title:"Hook Syntax",permalink:"/en/docs/react/hook-syntax"},next:{title:"Function/Class Components",permalink:"/en/docs/react/function-and-class-components"}},s={},c=[{value:"Specifying Props",id:"specifying-props",level:2},{value:"Specifying Render Types",id:"specifying-render-types",level:2},{value:"Polymorphic Component Types",id:"polymorphic-component-types",level:2},{value:"Annotating Components with Component Types",id:"annotating-components-with-component-types",level:2}],i={toc:c};function l(e){let{components:n,...o}=e;return(0,p.mdx)("wrapper",(0,t.A)({},i,o,{components:n,mdxType:"MDXLayout"}),(0,p.mdx)("admonition",{type:"info"},(0,p.mdx)("p",{parentName:"admonition"},"Component Types are only available in Flow v0.243.0+. If you are on an older version, please use ",(0,p.mdx)("a",{parentName:"p",href:"../types#toc-react-abstractcomponent"},"React.AbstractComponent"))),(0,p.mdx)("p",null,"Component Types have syntax similar to our runtime ",(0,p.mdx)("a",{parentName:"p",href:"../component-syntax"},"Component Syntax")," to make it easy to describe\nthe type of a component. Component Types are most useful for writing library definitions."),(0,p.mdx)("h2",{id:"specifying-props"},"Specifying Props"),(0,p.mdx)("p",null,"To declare a Component Type you can use the ",(0,p.mdx)("inlineCode",{parentName:"p"},"component")," keyword and list out the props your component expects."),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ntype ComponentType = component(numberProp: number, optionalProp?: string);\n\ndeclare const Component: ComponentType;\n\n<Component numberProp={3} />; // OK! optionalProp is optional\n")),(0,p.mdx)("p",null,"Like ",(0,p.mdx)("a",{parentName:"p",href:"../component-syntax/#rest-parameters"},"Component Syntax"),", Component Types also accept a rest parameter:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\n\nimport type {Props as StarProps} from './Star';\nimport Star from './Star';\n\ntype BlueStarType = component(specificProp: string, ...StarProps);\n")),(0,p.mdx)("p",null,"Like Component Syntax, you can also declare an inline ref prop (but not in your rest parameter):"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\nimport {useRef} from 'react';\n\ntype ComponentWithRef = component(someProp: number, ref: React.RefSetter<number>);\n\ndeclare const Component: ComponentWithRef;\n\ncomponent Example() {\n    const ref = useRef<number | null>(null);\n    return <Component someProp={42} ref={ref}/>;\n}\n")),(0,p.mdx)("h2",{id:"specifying-render-types"},"Specifying Render Types"),(0,p.mdx)("p",null,"You can also specify the ",(0,p.mdx)("a",{parentName:"p",href:"../render-types"},"Render Type")," for your component just like you can with\n",(0,p.mdx)("a",{parentName:"p",href:"../render-types/#basic-behavior"},"Component Syntax")),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent Foo() { return null }\ntype ComponentWithRenders = component() renders Foo;\n\ndeclare const Component: ComponentWithRenders;\n<Component /> as renders Foo; // OK!\n")),(0,p.mdx)("h2",{id:"polymorphic-component-types"},"Polymorphic Component Types"),(0,p.mdx)("p",null,'You can also write polymorphic Component Types, which is helpful for declaring "transparent" components:'),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ndeclare const TransparentComponent: component<T: React.Node>(children: T) renders T;\n\ncomponent Example() { return null }\n\nconst element: renders Example = (\n    <TransparentComponent>\n        <Example />\n    </TransparentComponent>\n); // OK!\n")),(0,p.mdx)("h2",{id:"annotating-components-with-component-types"},"Annotating Components with Component Types"),(0,p.mdx)("p",null,"Here's how you can describe the type of a Component Syntax component using a Component Type:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent Foo() { return null }\n\ncomponent Example(someProp: number, ref: React.RefSetter<number>) renders Foo {\n    return <Foo />;\n}\n\nExample as component(someProp: number, ref: React.RefSetter<number>) renders Foo; // OK!\n\n\ncomponent PolymorphicExample<T: React.Node>(children: T) renders T {\n    return children;\n}\n\nPolymorphicExample as component<T: React.Node>(children: T) renders T; // OK!\n")))}l.isMDXComponent=!0}}]);