"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1835],{71835:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=o(58168),r=(o(96540),o(15680));o(60681);const i={title:"Flow CLI",slug:"/cli",description:"How to use Flow from the command line. Including how to manage the Flow background process."},s=void 0,a={unversionedId:"cli/index",id:"cli/index",title:"Flow CLI",description:"How to use Flow from the command line. Including how to manage the Flow background process.",source:"@site/docs/cli/index.md",sourceDirName:"cli",slug:"/cli",permalink:"/en/docs/cli",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/cli/index.md",tags:[],version:"current",frontMatter:{title:"Flow CLI",slug:"/cli",description:"How to use Flow from the command line. Including how to manage the Flow background process."},sidebar:"docsSidebar",previous:{title:"Flow Strict",permalink:"/en/docs/strict"},next:{title:"Flow Coverage",permalink:"/en/docs/cli/coverage"}},l={},c=[],d={toc:c};function u(e){let{components:t,...o}=e;return(0,r.mdx)("wrapper",(0,n.A)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"The flow command line tool is made to be easy-to-use for simple cases."),(0,r.mdx)("p",null,"Using the command ",(0,r.mdx)("inlineCode",{parentName:"p"},"flow")," will type-check your current directory if the\n",(0,r.mdx)("inlineCode",{parentName:"p"},".flowconfig")," file is present. A flow server will automatically be started if\nneeded."),(0,r.mdx)("p",null,"The CLI tool also provides several other options and commands that allow you to\ncontrol the server and build tools that integrate with Flow. For example, this\nis how the ",(0,r.mdx)("a",{parentName:"p",href:"https://nuclide.io/"},"Nuclide")," editor integrates with Flow to\nprovide autocompletion, type errors, etc. in its UI."),(0,r.mdx)("p",null,"To find out more about the CLI just type:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"flow --help\n")),(0,r.mdx)("p",null,"This will give you information about everything that flow can do. Running this\ncommand should print something like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"Usage: flow [COMMAND] [PROJECT_ROOT]\n\nValid values for COMMAND:\n  ast              Print the AST\n  autocomplete     Queries autocompletion information\n  batch-coverage   Shows aggregate coverage information for a group of files or directories\n  check            Does a full Flow check and prints the results\n  check-contents   Run typechecker on contents from stdin\n  config           Read or write the .flowconfig file\n  coverage         Shows coverage information for a given file\n  cycle            Output .dot file for cycle containing the given file\n  find-module      Resolves a module reference to a file\n  find-refs        Gets the reference locations of a variable or property\n  force-recheck    Forces the server to recheck a given list of files\n  get-def          Gets the definition location of a variable or property\n  graph            Outputs dependency graphs of flow repositories\n  init             Initializes a directory to be used as a flow root directory\n  ls               Lists files visible to Flow\n  lsp              Acts as a server for the Language Server Protocol over stdin/stdout [experimental]\n  print-signature  Prints the type signature of a file as extracted in types-first mode\n  server           Runs a Flow server in the foreground\n  start            Starts a Flow server\n  status           (default) Shows current Flow errors by asking the Flow server\n  stop             Stops a Flow server\n  type-at-pos      Shows the type at a given file and position\n  version          Print version information\n\nDefault values if unspecified:\n  COMMAND         status\n  PROJECT_ROOT    current folder\n\nStatus command options:\n  --color              Display terminal output in color. never, always, auto (default: auto)\n  --from               Specify client (for use by editor plugins)\n  --help               This list of options\n  --json               Output results in JSON format\n  --no-auto-start      If the server is not running, do not start it; just exit\n  --old-output-format  Use old output format (absolute file names, line and column numbers)\n  --one-line           Escapes newlines so that each error prints on one line\n  --quiet              Suppresses the server-status information that would have been printed to stderr\n  --retries            Set the number of retries. (default: 3)\n  --show-all-errors    Print all errors (the default is to truncate after 50 errors)\n  --strip-root         Print paths without the root\n  --temp-dir           Directory in which to store temp files (default: /tmp/flow/)\n  --timeout            Maximum time to wait, in seconds\n  --version            Print version number and exit\n")),(0,r.mdx)("p",null,"Example with custom project root:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"mydir\n\u251c\u2500\u2500 frontend\n\u2502   \u251c\u2500\u2500 .flowconfig\n\u2502   \u2514\u2500\u2500 app.js\n\u2514\u2500\u2500 backend\n")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"flow check frontend\n")),(0,r.mdx)("p",null,"You can then, further dig into particular COMMANDs by adding the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--help")," flag."),(0,r.mdx)("p",null,"So, for example, if you want to know more about how the autocomplete works, you\ncan use this command:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"flow autocomplete --help\n")))}u.isMDXComponent=!0}}]);