"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7851],{87851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>c,frontMatter:()=>m,metadata:()=>r,toc:()=>l});var a=t(58168),o=(t(96540),t(15680));t(60681);const m={title:"Type Reference",slug:"/react/types"},p=void 0,r={unversionedId:"react/types",id:"react/types",title:"Type Reference",description:"React exports a handful of utility types that may be useful to you when typing",source:"@site/docs/react/types.md",sourceDirName:"react",slug:"/react/types",permalink:"/en/docs/react/types",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/react/types.md",tags:[],version:"current",frontMatter:{title:"Type Reference",slug:"/react/types"},sidebar:"docsSidebar",previous:{title:"Render Types",permalink:"/en/docs/react/render-types"},next:{title:"Flow Enums",permalink:"/en/docs/enums"}},i={},l=[{value:"<code>React.Node</code>",id:"toc-react-node",level:2},{value:"<code>React.MixedElement</code>",id:"toc-react-mixedelement",level:2},{value:"<code>React.ChildrenArray&lt;T&gt;</code>",id:"toc-react-childrenarray",level:2},{value:"<code>React.AbstractComponent&lt;Config, Instance, Renders&gt;</code>",id:"toc-react-abstractcomponent",level:2},{value:"<code>React.ComponentType&lt;Config&gt;</code>",id:"toc-react-componenttype",level:2},{value:"<code>React.ElementType</code>",id:"toc-react-elementtype",level:2},{value:"<code>React.Key</code>",id:"toc-react-key",level:2},{value:"<code>React.Ref&lt;typeof Component&gt;</code>",id:"toc-react-ref",level:2},{value:"<code>React.PropsOf&lt;Component&gt;</code>",id:"toc-react-propsof",level:2},{value:"<code>React.ElementConfig&lt;typeof Component&gt;</code>",id:"toc-react-elementconfig",level:2},{value:"<code>React.ElementProps&lt;typeof Component&gt;</code>",id:"toc-react-elementprops",level:2},{value:"<code>React.RefOf&lt;Component&gt;</code>",id:"toc-react-refof",level:2},{value:"<code>React.ElementRef&lt;typeof Component&gt;</code>",id:"toc-react-elementref",level:2},{value:"<code>React.Config&lt;Props, DefaultProps&gt;</code>",id:"toc-react-config",level:2},{value:"<code>ExactReactElement_DEPRECATED&lt;typeof Component&gt;</code>",id:"toc-react-element",level:2}],d={toc:l};function c(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"React exports a handful of utility types that may be useful to you when typing\nadvanced React patterns. In previous sections we have seen a few of them. The\nfollowing is a complete reference for each of these types along with some\nexamples for how/where to use them."),(0,o.mdx)("p",null,"These types are all exported as named type exports from the ",(0,o.mdx)("inlineCode",{parentName:"p"},"react")," module. If\nyou want to access them as members on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"React")," object (e.g.\n",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-node"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Node")),") and\nyou are importing React as an ES module then you should import ",(0,o.mdx)("inlineCode",{parentName:"p"},"React")," as a\nnamespace:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\n")),(0,o.mdx)("p",null,"If you are using CommonJS you can also require React:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const React = require('react');\n")),(0,o.mdx)("p",null,"You can also use named type imports in either an ES module environment or a\nCommonJS environment:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"import type {Node} from 'react';\n")),(0,o.mdx)("p",null,"We will refer to all the types in the following reference as if we imported them\nwith:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\n")),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Note:")," While importing React with a default import works:"),(0,o.mdx)("pre",{parentName:"blockquote"},(0,o.mdx)("code",{parentName:"pre"},"import React from 'react';\n")),(0,o.mdx)("p",{parentName:"blockquote"},"You will have access to all of the values that React exports, but you will\n",(0,o.mdx)("strong",{parentName:"p"},"not")," have access to the types documented below! This is because Flow will\nnot add types to a default export since the default export could be any value\n(like a number). Flow will add exported named types to an ES namespace object\nwhich you can get with ",(0,o.mdx)("inlineCode",{parentName:"p"},"import * as React from 'react'")," since Flow knows if\nyou export a value with the same name as an exported type."),(0,o.mdx)("p",{parentName:"blockquote"},"Again, if you import React with: ",(0,o.mdx)("inlineCode",{parentName:"p"},"import React from 'react'")," you will be able\nto access ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Component"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.createElement()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Children"),", and\nother JavaScript ",(0,o.mdx)("em",{parentName:"p"},"values"),". However, you will not be able to access\n",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-node"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Node")),", ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-childrenarray"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.ChildrenArray"))," or\nother Flow ",(0,o.mdx)("em",{parentName:"p"},"types"),". You will need to use a named type import like:\n",(0,o.mdx)("inlineCode",{parentName:"p"},"import type {Node} from 'react'")," in addition to your default import.")),(0,o.mdx)("h2",{id:"toc-react-node"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.Node")),(0,o.mdx)("p",null,"This represents any node that can be rendered in a React application.\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Node")," can be null, a boolean, a number, a string, a React\nelement, or an array of any of those types recursively."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"React.Node")," is a good default to use to annotate the return type of a function component\nand class render methods. You can also use it to type elements your component takes in as children."),(0,o.mdx)("p",null,"Here is an example of ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Node")," being used as the return type to a function component:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function MyComponent(props: {}): React.Node {\n  // ...\n}\n")),(0,o.mdx)("p",null,"It may also be used as the return type of a class ",(0,o.mdx)("inlineCode",{parentName:"p"},"render")," method:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"class MyComponent extends React.Component<{}> {\n  render(): React.Node {\n    // ...\n  }\n}\n")),(0,o.mdx)("p",null,"Here is an example of ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Node")," as the prop type for children:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function MyComponent({ children }: { children: React.Node }) {\n  return <div>{children}</div>;\n}\n")),(0,o.mdx)("p",null,"All ",(0,o.mdx)("inlineCode",{parentName:"p"},"react-dom")," JSX intrinsics have ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Node")," as their children type.\n",(0,o.mdx)("inlineCode",{parentName:"p"},"<div>"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"<span>"),", and all the rest."),(0,o.mdx)("h2",{id:"toc-react-mixedelement"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.MixedElement")),(0,o.mdx)("p",null,"The most general type of all React elements (similar to ",(0,o.mdx)("inlineCode",{parentName:"p"},"mixed")," for all values)."),(0,o.mdx)("p",null,"A common use case of this type is when we want to annotate an element with a type that hides the element details. For example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const element: React.MixedElement = <div />;\n")),(0,o.mdx)("h2",{id:"toc-react-childrenarray"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.ChildrenArray<T>")),(0,o.mdx)("p",null,"A React children array can be a single value or an array nested to any level.\nIt is designed to be used with the ",(0,o.mdx)("a",{parentName:"p",href:"https://react.dev/reference/react/Children"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Children")," API"),"."),(0,o.mdx)("p",null,"For example if you want to get a normal JavaScript array from a\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.ChildrenArray<T>")," see the following example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\n\n// A children array can be a single value...\nconst children: React.ChildrenArray<number> = 42;\n// ...or an arbitrarily nested array.\nconst children: React.ChildrenArray<number> = [[1, 2], 3, [4, 5]];\n\n// Using the `React.Children` API can flatten the array.\nconst array: Array<number> = React.Children.toArray(children);\n")),(0,o.mdx)("h2",{id:"toc-react-abstractcomponent"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.AbstractComponent<Config, Instance, Renders>")),(0,o.mdx)("admonition",{type:"tip"},(0,o.mdx)("p",{parentName:"admonition"},"In Flow v0.243.0+, consider using ",(0,o.mdx)("a",{parentName:"p",href:"../component-types"},"Component Types")," instead, which will make\nit easier to migrate your Flow code to React 19.")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"React.AbstractComponent<Config, Instance, Renders>")," represents a component with\na config of type Config and instance of type Instance that renders something of type Renders."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"Config")," of a component is the type of the object you need to pass in to JSX in order\nto create an element with that component. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"Instance")," of a component is the type of the value\nthat is written to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"current")," field of a ref object passed into the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ref")," prop in JSX.\n",(0,o.mdx)("inlineCode",{parentName:"p"},"Renders")," is a ",(0,o.mdx)("a",{parentName:"p",href:"../component-syntax"},"Component Syntax")," feature that allows you to specify what your\ncomponent renders via ",(0,o.mdx)("a",{parentName:"p",href:"../render-types"},"Render Types")),(0,o.mdx)("p",null,"Config is required, but Instance is optional and defaults to mixed and Renders is optional and defaults to React.Node."),(0,o.mdx)("p",null,"A class or function component with config ",(0,o.mdx)("inlineCode",{parentName:"p"},"Config")," may be used in places that expect\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.AbstractComponent<Config>"),"."),(0,o.mdx)("p",null,"This is Flow's most abstract representation of a React component, and is most useful for\nwriting HOCs and library definitions."),(0,o.mdx)("h2",{id:"toc-react-componenttype"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.ComponentType<Config>")),(0,o.mdx)("p",null,"This is the same as ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-abstractcomponent"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.AbstractComponent")),", but only specifies the first type argument."),(0,o.mdx)("h2",{id:"toc-react-elementtype"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.ElementType")),(0,o.mdx)("p",null,"Similar to ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-abstractcomponent"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.AbstractComponent<Props>"))," except it also\nincludes JSX intrinsics (strings)."),(0,o.mdx)("p",null,"The definition for ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.ElementType")," is roughly:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"type ElementType =\n  | string\n  | React.AbstractComponent<empty, mixed, React.Node>;\n")),(0,o.mdx)("h2",{id:"toc-react-key"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.Key")),(0,o.mdx)("p",null,"The type of the key prop on React elements. It is a union of strings and\nnumbers defined as:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"type Key = string | number;\n")),(0,o.mdx)("h2",{id:"toc-react-ref"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.Ref<typeof Component>")),(0,o.mdx)("p",null,"The type of the ",(0,o.mdx)("a",{parentName:"p",href:"https://react.dev/learn/manipulating-the-dom-with-refs"},"ref prop on React elements"),". ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Ref<typeof Component>"),"\ncould be a string, ref object, or ref function."),(0,o.mdx)("p",null,"The ref function will take one and only argument which will be the element\ninstance which is retrieved using\n",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-elementref"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.ElementRef<typeof Component>"))," or null since\n",(0,o.mdx)("a",{parentName:"p",href:"https://react.dev/learn/manipulating-the-dom-with-refs#how-to-manage-a-list-of-refs-using-a-ref-callback"},"React will pass null into a ref function when unmounting"),"."),(0,o.mdx)("p",null,"Like ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-element"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Element<typeof Component>")),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component"),"\nmust be the type ",(0,o.mdx)("em",{parentName:"p"},"of")," a React component so you need to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," as in\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Ref<typeof MyComponent>"),"."),(0,o.mdx)("p",null,"The definition for ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Ref<typeof Component>")," is roughly:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"type Ref<C> =\n  | string\n  | (instance: React.ElementRef<C> | null) => mixed;\n  | { -current: React$ElementRef<ElementType> | null, ... }\n")),(0,o.mdx)("h2",{id:"toc-react-propsof"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.PropsOf<Component>")),(0,o.mdx)("p",null,"When ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," is written using ",(0,o.mdx)("a",{parentName:"p",href:"../component-syntax"},"Component Syntax"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.PropsOf<Component>"),"\ngives you the type of an object that you must pass in to instantiate ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," with JSX.\nImportantly, the props with defaults are optional in the resulting type."),(0,o.mdx)("p",null,"For example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ncomponent MyComponent(foo: number, bar: string = 'str') {\n  return null;\n}\n\n// Only foo is required\n({foo: 3}) as React.ElementConfig<typeof MyComponent>;\n")),(0,o.mdx)("h2",{id:"toc-react-elementconfig"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.ElementConfig<typeof Component>")),(0,o.mdx)("p",null,"Like ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-propsof"},"React.PropsOf"),", this utility gets the type of the object that you must pass in to a\ncomponent in order to instantiate it via ",(0,o.mdx)("inlineCode",{parentName:"p"},"createElement()")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"jsx()"),". While ",(0,o.mdx)("inlineCode",{parentName:"p"},"PropsOf")," takes in an element of\na component, which is convenient when using ",(0,o.mdx)("a",{parentName:"p",href:"../component-syntax"},"Component Syntax"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"ElementConfig")," takes in the type of a component\ninstead. ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," must be the type ",(0,o.mdx)("em",{parentName:"p"},"of")," a React component so you need to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," as in\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.ElementConfig<typoef Component>"),"."),(0,o.mdx)("p",null,"Importantly, props with defaults are optional in the resulting type."),(0,o.mdx)("p",null,"For example,"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\n\nclass MyComponent extends React.Component<{foo: number}> {\n  static defaultProps = {foo: 42};\n\n  render() {\n    return this.props.foo;\n  }\n}\n\n// `React.ElementProps<>` requires `foo` even though it has a `defaultProp`.\n({foo: 42}) as React.ElementProps<typeof MyComponent>;\n\n// `React.ElementConfig<>` does not require `foo` since it has a `defaultProp`.\n({}) as React.ElementConfig<typeof MyComponent>;\n")),(0,o.mdx)("p",null,"Like ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-element"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Element<typeof Component>")),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," must be the\ntype ",(0,o.mdx)("em",{parentName:"p"},"of")," a React component so you need to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," as in\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.ElementProps<typeof MyComponent>"),"."),(0,o.mdx)("h2",{id:"toc-react-elementprops"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.ElementProps<typeof Component>")),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Note:")," Because ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-elementprops"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.ElementProps"))," does not preserve the optionality of ",(0,o.mdx)("inlineCode",{parentName:"p"},"defaultProps"),", ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-elementconfig"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.ElementConfig"))," (which does) is more often the right choice, especially for simple props pass-through as with ",(0,o.mdx)("a",{parentName:"p",href:"../hoc/#toc-supporting-defaultprops-with-react-elementconfig"},"higher-order components"),".\nYou probably should not use ElementProps.")),(0,o.mdx)("p",null,"Gets the props for a React element type, ",(0,o.mdx)("em",{parentName:"p"},"without")," preserving the optionality of ",(0,o.mdx)("inlineCode",{parentName:"p"},"defaultProps"),".\n",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," could be the type of a React class component, a function component, or a JSX intrinsic string.\nThis type is used for the ",(0,o.mdx)("inlineCode",{parentName:"p"},"props")," property on ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-element"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Element<typeof Component>")),"."),(0,o.mdx)("p",null,"Like ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-element"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Element<typeof Component>")),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," must be the\ntype ",(0,o.mdx)("em",{parentName:"p"},"of")," a React component so you need to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," as in\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.ElementProps<typeof MyComponent>"),"."),(0,o.mdx)("h2",{id:"toc-react-refof"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.RefOf<Component>")),(0,o.mdx)("p",null,"When using ",(0,o.mdx)("a",{parentName:"p",href:"../component-syntax"},"Component Syntax"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.RefOf<Component>")," will give you\nthe type of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"current")," field on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ref")," prop of the component. If there is no ",(0,o.mdx)("inlineCode",{parentName:"p"},"ref")," prop\non the component it will return ",(0,o.mdx)("inlineCode",{parentName:"p"},"void"),"."),(0,o.mdx)("h2",{id:"toc-react-elementref"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.ElementRef<typeof Component>")),(0,o.mdx)("p",null,"Gets the instance type for a React element. The instance will be different for\nvarious component types:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"React.AbstractComponent<Config, Instance> will return the Instance type."),(0,o.mdx)("li",{parentName:"ul"},"React class components will be the class instance. So if you had\n",(0,o.mdx)("inlineCode",{parentName:"li"},"class Foo extends React.Component<{}> {}")," and used\n",(0,o.mdx)("inlineCode",{parentName:"li"},"React.ElementRef<typeof Foo>")," then the type would be the instance of ",(0,o.mdx)("inlineCode",{parentName:"li"},"Foo"),"."),(0,o.mdx)("li",{parentName:"ul"},"React function components do not have a backing instance and so\n",(0,o.mdx)("inlineCode",{parentName:"li"},"React.ElementRef<typeof Bar>")," (when ",(0,o.mdx)("inlineCode",{parentName:"li"},"Bar")," is ",(0,o.mdx)("inlineCode",{parentName:"li"},"function Bar() {}"),") will give\nyou the void type."),(0,o.mdx)("li",{parentName:"ul"},"JSX intrinsics like ",(0,o.mdx)("inlineCode",{parentName:"li"},"div")," will give you their DOM instance. For\n",(0,o.mdx)("inlineCode",{parentName:"li"},"React.ElementRef<'div'>")," that would be ",(0,o.mdx)("inlineCode",{parentName:"li"},"HTMLDivElement"),". For\n",(0,o.mdx)("inlineCode",{parentName:"li"},"React.ElementRef<'input'>")," that would be ",(0,o.mdx)("inlineCode",{parentName:"li"},"HTMLInputElement"),".")),(0,o.mdx)("p",null,"Like ",(0,o.mdx)("a",{parentName:"p",href:"#toc-react-element"},(0,o.mdx)("inlineCode",{parentName:"a"},"React.Element<typeof Component>")),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," must be the\ntype ",(0,o.mdx)("em",{parentName:"p"},"of")," a React component so you need to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," as in\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.ElementRef<typeof MyComponent>"),"."),(0,o.mdx)("h2",{id:"toc-react-config"},(0,o.mdx)("inlineCode",{parentName:"h2"},"React.Config<Props, DefaultProps>")),(0,o.mdx)("p",null,"Calculates a config object from props and default props. This is most useful for annotating\nHOCs that are abstracted over configs. See our ",(0,o.mdx)("a",{parentName:"p",href:"../hoc"},"docs on writing HOCs")," for more information."),(0,o.mdx)("h2",{id:"toc-react-element"},(0,o.mdx)("inlineCode",{parentName:"h2"},"ExactReactElement_DEPRECATED<typeof Component>")),(0,o.mdx)("admonition",{type:"warning"},(0,o.mdx)("p",{parentName:"admonition"},"This is an exact replacement of the removed 'React.Element' type since 0.245.\nYou should use ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.MixedElement")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"React.Node")," instead.\nIf you want to enforce design system constraints, use ",(0,o.mdx)("a",{parentName:"p",href:"../render-types"},"render types")," instead.")),(0,o.mdx)("p",null,"A React element is the type for the value of a JSX element:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const element: ExactReactElement_DEPRECATED<'div'> = <div />;\n")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"ExactReactElement_DEPRECATED<typeof Component>")," is also the return type of\n",(0,o.mdx)("inlineCode",{parentName:"p"},"React.createElement()"),"/",(0,o.mdx)("inlineCode",{parentName:"p"},"React.jsx()"),"."),(0,o.mdx)("p",null,"A ",(0,o.mdx)("inlineCode",{parentName:"p"},"ExactReactElement_DEPRECATED")," takes a single type argument,\n",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component"),". ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," is the component type of the React\nelement. For an intrinsic element, ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," will be the string literal\nfor the intrinsic you used. Here are a few examples with DOM intrinsics:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"<div /> as ExactReactElement_DEPRECATED<'div'>; // OK\n<span /> as ExactReactElement_DEPRECATED<'span'>; // OK\n<div /> as ExactReactElement_DEPRECATED<'span'>; // Error: div is not a span.\n")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"typeof Component")," can also be your React class component or function component."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"function Foo(props: {}) {}\nclass Bar extends React.Component<{}> {}\n\n<Foo /> as ExactReactElement_DEPRECATED<typeof Foo>; // OK\n<Bar /> as ExactReactElement_DEPRECATED<typeof Bar>; // OK\n<Foo /> as ExactReactElement_DEPRECATED<typeof Bar>; // Error: Foo is not Bar\n")),(0,o.mdx)("p",null,"Take note of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof"),", it is required! We want to get the\ntype ",(0,o.mdx)("em",{parentName:"p"},"of")," the value ",(0,o.mdx)("inlineCode",{parentName:"p"},"Foo"),". ",(0,o.mdx)("inlineCode",{parentName:"p"},"Foo as Foo")," is an error because ",(0,o.mdx)("inlineCode",{parentName:"p"},"Foo")," cannot be used\nas a type, so the following is correct: ",(0,o.mdx)("inlineCode",{parentName:"p"},"Foo as typeof Foo"),"."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"Bar")," without ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," would be the type of an instance of ",(0,o.mdx)("inlineCode",{parentName:"p"},"Bar"),": ",(0,o.mdx)("inlineCode",{parentName:"p"},"new Bar() as Bar"),".\nWe want the type ",(0,o.mdx)("em",{parentName:"p"},"of")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"Bar")," not the type of an instance of ",(0,o.mdx)("inlineCode",{parentName:"p"},"Bar"),".\n",(0,o.mdx)("inlineCode",{parentName:"p"},"Class<Bar>")," would also work here, but we prefer ",(0,o.mdx)("inlineCode",{parentName:"p"},"typeof")," for consistency\nwith function components."))}c.isMDXComponent=!0}}]);