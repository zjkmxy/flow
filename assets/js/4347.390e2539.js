"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[4347],{34347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=n(58168),a=(n(96540),n(15680));n(60681);const i={title:"Width Subtyping",slug:"/lang/width-subtyping"},s=void 0,r={unversionedId:"lang/width-subtyping",id:"lang/width-subtyping",title:"Width Subtyping",description:'It\'s safe to use an object with "extra" properties in a position that is',source:"@site/docs/lang/width-subtyping.md",sourceDirName:"lang",slug:"/lang/width-subtyping",permalink:"/en/docs/lang/width-subtyping",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/lang/width-subtyping.md",tags:[],version:"current",frontMatter:{title:"Width Subtyping",slug:"/lang/width-subtyping"},sidebar:"docsSidebar",previous:{title:"Depth Subtyping",permalink:"/en/docs/lang/depth-subtyping"},next:{title:"Type Refinements",permalink:"/en/docs/lang/refinements"}},p={},l=[],d={toc:l};function m(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,o.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,'It\'s safe to use an object with "extra" properties in a position that is\nannotated with a specific set of properties, if that object type is ',(0,a.mdx)("a",{parentName:"p",href:"../../types/objects/#exact-and-inexact-object-types"},"inexact"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'function func(obj: {foo: string, ...}) {\n  // ...\n}\n\nfunc({\n  foo: "test", // Works!\n  bar: 42      // Works!\n});\n')),(0,a.mdx)("p",null,"Within ",(0,a.mdx)("inlineCode",{parentName:"p"},"func"),", we know that ",(0,a.mdx)("inlineCode",{parentName:"p"},"obj")," has at least a property ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo")," and the\nproperty access expression ",(0,a.mdx)("inlineCode",{parentName:"p"},"obj.foo")," will have type ",(0,a.mdx)("inlineCode",{parentName:"p"},"string"),"."),(0,a.mdx)("p",null,'This is a kind of subtyping commonly referred to as "width subtyping" because\na type that is "wider" (i.e., has more properties) is a subtype of a\nnarrower type.'),(0,a.mdx)("p",null,"So in the following example, ",(0,a.mdx)("inlineCode",{parentName:"p"},"obj2")," is a ",(0,a.mdx)("em",{parentName:"p"},"subtype")," of ",(0,a.mdx)("inlineCode",{parentName:"p"},"obj1"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"let obj1: {foo: string, ...}  = {foo: 'test'};\nlet obj2 = {foo: 'test', bar: 42};\nobj2 as {foo: string, ...};\n")),(0,a.mdx)("p",null,"However, it's often useful to know that a property is definitely absent."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":3,"startColumn":5,"endLine":3,"endColumn":11,"description":"Cannot cast `obj.foo` to string because property `foo` of unknown type [1] is incompatible with string [2]. [incompatible-cast]"}]','[{"startLine":3,"startColumn":5,"endLine":3,"endColumn":11,"description":"Cannot':!0,cast:!0,"`obj.foo`":!0,to:!0,string:!0,because:!0,property:!0,"`foo`":!0,of:!0,unknown:!0,type:!0,"[1]":!0,is:!0,incompatible:!0,with:!0,"[2].":!0,'[incompatible-cast]"}]':!0},"function func(obj: {foo: string, ...} | {bar: number, ...}) {\n  if (obj.foo) {\n    obj.foo as string; // Error!\n  }\n}\n")),(0,a.mdx)("p",null,"The above code has a type error because Flow would also allow the call\nexpression ",(0,a.mdx)("inlineCode",{parentName:"p"},"func({foo: 1, bar: 2})"),", because ",(0,a.mdx)("inlineCode",{parentName:"p"},"{foo: number, bar: number}"),"\nis a subtype of ",(0,a.mdx)("inlineCode",{parentName:"p"},"{bar: number, ...}"),", one of the members of the parameter's union\ntype."),(0,a.mdx)("p",null,"For cases like this where it's useful to assert the absence of a property,\nYou can use ",(0,a.mdx)("a",{parentName:"p",href:"../../types/objects/#exact-and-inexact-object-types"},"exact object types"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function func(obj: {foo: string} | {bar: number}) {\n  if (obj.foo) {\n    obj.foo as string; // Works!\n  }\n}\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"../../types/objects/#exact-and-inexact-object-types"},"Exact object types")," disable width\nsubtyping, and do not allow additional properties to exist."),(0,a.mdx)("p",null,"Using exact object types lets Flow know that no extra properties will exist at\nruntime, which allows ",(0,a.mdx)("a",{parentName:"p",href:"../refinements/"},"refinements")," to get more specific."))}m.isMDXComponent=!0}}]);