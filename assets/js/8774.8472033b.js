"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8774],{68774:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var t=a(58168),o=(a(96540),a(15680));a(60681);const l={title:"Any",slug:"/types/any"},r=void 0,i={unversionedId:"types/any",id:"types/any",title:"Any",description:"Warning: Do not mistake any with mixed. It's also not the same as empty.",source:"@site/docs/types/any.md",sourceDirName:"types",slug:"/types/any",permalink:"/en/docs/types/any",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/any.md",tags:[],version:"current",frontMatter:{title:"Any",slug:"/types/any"},sidebar:"docsSidebar",previous:{title:"Empty",permalink:"/en/docs/types/empty"},next:{title:"Maybe Types",permalink:"/en/docs/types/maybe"}},d={},s=[{value:"Avoid leaking <code>any</code>",id:"toc-avoid-leaking-any",level:2}],p={toc:s};function m(e){let{components:n,...a}=e;return(0,o.mdx)("wrapper",(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("strong",{parentName:"p"},"Warning:")," Do not mistake ",(0,o.mdx)("inlineCode",{parentName:"p"},"any")," with ",(0,o.mdx)("a",{parentName:"p",href:"../mixed"},(0,o.mdx)("inlineCode",{parentName:"a"},"mixed")),". It's also not the same as ",(0,o.mdx)("a",{parentName:"p",href:"../empty"},(0,o.mdx)("inlineCode",{parentName:"a"},"empty")),".")),(0,o.mdx)("p",null,"If you want a way to opt-out of using the type checker, ",(0,o.mdx)("inlineCode",{parentName:"p"},"any")," is the way to do\nit. ",(0,o.mdx)("strong",{parentName:"p"},"Using ",(0,o.mdx)("inlineCode",{parentName:"strong"},"any")," is completely unsafe, and should be avoided whenever\npossible.")),(0,o.mdx)("p",null,"For example, the following code will not report any errors:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'function add(one: any, two: any): number {\n  return one + two;\n}\n\nadd(1, 2);     // Works.\nadd("1", "2"); // Works.\nadd({}, []);   // Works.\n')),(0,o.mdx)("p",null,"Even code that will cause runtime errors will not be caught by Flow:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function getNestedProperty(obj: any) {\n  return obj.foo.bar.baz;\n}\n\ngetNestedProperty({});\n")),(0,o.mdx)("p",null,"There are only a couple of scenarios where you might consider using ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),":"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"When you are in the process of converting existing code to using Flow\ntypes and you are currently blocked on having the code type checked (maybe\nother code needs to be converted first)."),(0,o.mdx)("li",{parentName:"ol"},"When you are certain your code works and for some reason Flow is unable to\ntype check it correctly. There are a (decreasing) number of idioms in\nJavaScript that Flow is unable to statically type.")),(0,o.mdx)("p",null,"You can ban ",(0,o.mdx)("inlineCode",{parentName:"p"},"any")," by enabling the ",(0,o.mdx)("a",{parentName:"p",href:"../../linting/rule-reference/#toc-unclear-type"},(0,o.mdx)("inlineCode",{parentName:"a"},"unclear-type"))," lint rule."),(0,o.mdx)("p",null,"You can use the ",(0,o.mdx)("a",{parentName:"p",href:"../../cli/coverage/"},"coverage")," command to identify code typed as ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),"."),(0,o.mdx)("h2",{id:"toc-avoid-leaking-any"},"Avoid leaking ",(0,o.mdx)("inlineCode",{parentName:"h2"},"any")),(0,o.mdx)("p",null,"When you have a value with the type ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),", you can cause Flow to infer ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),"\nfor the results of all of the operations you perform."),(0,o.mdx)("p",null,"For example, if you get a property on an object typed ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),", the resulting\nvalue will also have the type ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function fn(obj: any) {\n  let foo = obj.foo; // Results in `any` type\n}\n")),(0,o.mdx)("p",null,"You could then use the resulting value in another operation, such as adding it\nas if it were a number and the result will also be ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function fn(obj: any) {\n  let foo = obj.foo; // Results in `any` type\n  let bar = foo * 2; // Results in `any` type\n}\n")),(0,o.mdx)("p",null,"You could continue this process until ",(0,o.mdx)("inlineCode",{parentName:"p"},"any")," has leaked all over your code."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},'function fn(obj: any) {\n  let foo = obj.foo;\n  let bar = foo * 2;\n  return bar; // Results in `any` type\n}\n\nlet bar = fn({ foo: 2 }); // Results in `any` type\nlet baz = "baz:" + bar; // Results in `any` type\n')),(0,o.mdx)("p",null,"Prevent this from happening by cutting ",(0,o.mdx)("inlineCode",{parentName:"p"},"any")," off as soon as possible by casting\nit to another type."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function fn(obj: any) {\n  let foo: number = obj.foo;\n}\n")),(0,o.mdx)("p",null,"Now your code will not leak ",(0,o.mdx)("inlineCode",{parentName:"p"},"any"),"."))}m.isMDXComponent=!0}}]);