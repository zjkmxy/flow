"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8991],{18991:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>i});var t=n(58168),s=(n(96540),n(15680));const r={title:"Announcing Typecasts","short-title":"Typecasts",author:"Basil Hosmer",hide_table_of_contents:!0},l=void 0,o={permalink:"/blog/2015/02/18/Typecasts",source:"@site/blog/2015-02-18-Typecasts.md",title:"Announcing Typecasts",description:"As of version 0.3.0, Flow supports typecast expression.",date:"2015-02-18T00:00:00.000Z",formattedDate:"February 18, 2015",tags:[],hasTruncateMarker:!0,authors:[{name:"Basil Hosmer"}],frontMatter:{title:"Announcing Typecasts","short-title":"Typecasts",author:"Basil Hosmer",hide_table_of_contents:!0},prevItem:{title:"Announcing Import Type",permalink:"/blog/2015/02/18/Import-Types"}},p={authorsImageUrls:[void 0]},i=[{value:"How Typecasts Work",id:"how-typecasts-work",level:2},{value:"Safety",id:"safety",level:2},{value:"More examples",id:"more-examples",level:2},{value:"Transformations",id:"transformations",level:2}],m={toc:i};function d(e){let{components:a,...n}=e;return(0,s.mdx)("wrapper",(0,t.A)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"As of version 0.3.0, Flow supports typecast expression."),(0,s.mdx)("p",null,"A typecast expression is a simple way to type-annotate any JavaScript expression. Here are some examples of typecasts:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-JavaScript"},"(1 + 1 : number);\nvar a = { name: (null: ?string) };\n([1, 'a', true]: Array<mixed>).map(fn);\n")),(0,s.mdx)("p",null,"For any JavaScript expression ",(0,s.mdx)("inlineCode",{parentName:"p"},"<expr>")," and any Flow type ",(0,s.mdx)("inlineCode",{parentName:"p"},"<type>"),", you can write"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-JavaScript"},"(<expr> : <type>)\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Note:")," the parentheses are necessary."),(0,s.mdx)("h2",{id:"how-typecasts-work"},"How Typecasts Work"),(0,s.mdx)("p",null,"To evaluate a typecast expression, Flow will first check that ",(0,s.mdx)("inlineCode",{parentName:"p"},"<expr>")," is a ",(0,s.mdx)("inlineCode",{parentName:"p"},"<type>"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-JavaScript"},"(1+1: number); // this is fine\n(1+1: string); // but this is is an error\n")),(0,s.mdx)("p",null,"Second, Flow will infer that the typecast expression ",(0,s.mdx)("inlineCode",{parentName:"p"},"(<expr>: <type>)")," has the type ",(0,s.mdx)("inlineCode",{parentName:"p"},"<type>"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-JavaScript"},"[(0: ?number)]; // Flow will infer the type Array<?number>\n[0];            // Without the typecast, Flow infers the type Array<number>\n")),(0,s.mdx)("h2",{id:"safety"},"Safety"),(0,s.mdx)("p",null,"Typecasts obey the same rules as other type annotations, so they provide the same safety guarantees. This means they are safe unless you explicitly use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"any")," type to defeat Flow's typechecking. Here are examples of upcasting (which is allowed), downcasting (which is forbidden), and using ",(0,s.mdx)("inlineCode",{parentName:"p"},"any"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-JavaScript"},"class Base {}\nclass Child extends Base {}\nvar child: Child = new Child();\n\n// Upcast from Child to Base, a more general type: OK\nvar base: Base = new Child();\n\n// Upcast from Child to Base, a more general type: OK\n(child: Base);\n\n// Downcast from Base to Child: unsafe, ERROR\n(base: Child);\n\n// Upcast base to any then downcast any to Child.\n// Unsafe downcasting from any is allowed: OK\n((base: any): Child);\n")),(0,s.mdx)("h2",{id:"more-examples"},"More examples"),(0,s.mdx)("p",null,"Typecasts are particularly useful to check assumptions and help Flow infer the types you intend. Here are some examples:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-JavaScript"},"(x: number) // Make Flow check that x is a number\n(0: ?number) // Tells Flow that this expression is actually nullable.\n(null: ?number) // Tells Flow that this expression is a nullable number.\n")),(0,s.mdx)("h2",{id:"transformations"},"Transformations"),(0,s.mdx)("p",null,"Like type annotations and other Flow features, typecasts need to be transformed away before the code can be run. The transforms will be available in react-tools ",(0,s.mdx)("inlineCode",{parentName:"p"},"0.13.0")," when it is published soon, but for now they're available in ",(0,s.mdx)("inlineCode",{parentName:"p"},"0.13.0-beta.2"),", which you can install with"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install react-tools@0.13.0-beta.2\n")))}d.isMDXComponent=!0}}]);