"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[435],{20435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>m});var i=t(58168),a=(t(96540),t(15680));t(60681);const l={title:"Vim",slug:"/editors/vim"},o=void 0,r={unversionedId:"editors/vim",id:"editors/vim",title:"Vim",description:"Flow's editor integration is primarily via the Language Server Protocol. There are many vim LSP clients to choose from, such as ALE.",source:"@site/docs/editors/vim.md",sourceDirName:"editors",slug:"/editors/vim",permalink:"/en/docs/editors/vim",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/editors/vim.md",tags:[],version:"current",frontMatter:{title:"Vim",slug:"/editors/vim"},sidebar:"docsSidebar",previous:{title:"Sublime Text",permalink:"/en/docs/editors/sublime-text"},next:{title:"Emacs",permalink:"/en/docs/editors/emacs"}},s={},m=[{value:"ALE",id:"toc-ale",level:2},{value:"Installation",id:"toc-installation",level:3},{value:"coc.nvim-neovim",id:"toc-coc-nvim-neovim",level:2},{value:"Setup",id:"toc-setup",level:3},{value:"LanguageClient-neovim",id:"toc-languageclient-neovim",level:2},{value:"Requirements",id:"toc-requirements",level:3},{value:"Pathogen",id:"toc-pathogen",level:3},{value:"NeoBundle",id:"toc-neobundle",level:3},{value:"VimPlug",id:"toc-vimplug",level:3},{value:"Setup",id:"toc-setup",level:3}],u={toc:m};function d(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,i.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Flow's editor integration is primarily via the ",(0,a.mdx)("a",{parentName:"p",href:"https://microsoft.github.io/language-server-protocol/"},"Language Server Protocol"),". There are ",(0,a.mdx)("a",{parentName:"p",href:"https://microsoft.github.io/language-server-protocol/implementors/tools/"},"many vim LSP clients")," to choose from, such as ",(0,a.mdx)("a",{parentName:"p",href:"#toc-ale"},"ALE"),"."),(0,a.mdx)("h2",{id:"toc-ale"},"ALE"),(0,a.mdx)("p",null,"The Asynchronous Lint Engine (ALE) plugin for Vim 8+ and NeoVim, ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/w0rp/ale"},"vim-ale"),", is a generalized linting engine with support for Flow and many other tools."),(0,a.mdx)("h3",{id:"toc-installation"},"Installation"),(0,a.mdx)("p",null,"Follow the ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/w0rp/ale#3-installation"},"instructions")," in the ALE README."),(0,a.mdx)("p",null,"Configure ALE to use the ",(0,a.mdx)("inlineCode",{parentName:"p"},"flow-language-server")," linter for JavaScript files:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-vim"},"\" In ~/.vim/ftplugin/javascript.vim, or somewhere similar.\n\n\" Enables only Flow for JavaScript. See :ALEInfo for a list of other available\n\" linters. NOTE: the `flow` linter uses an old API; prefer `flow-language-server`.\nlet b:ale_linters = ['flow-language-server']\n\n\" Or in ~/.vim/vimrc:\nlet g:ale_linters = {\n\\   'javascript': ['flow-language-server'],\n\\}\n")),(0,a.mdx)("h2",{id:"toc-coc-nvim-neovim"},"coc.nvim-neovim"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/neoclide/coc.nvim"},"Coc")," is an intellisense engine for vim8 & neovim."),(0,a.mdx)("h3",{id:"toc-setup"},"Setup"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-vim"},"set nocompatible\nfiletype off\n\n\" install coc.nvim using Plug or preffered plugin manager\ncall plug#begin('~/.vim/plugged')\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\ncall plug#end()\n\nfiletype plugin indent on\n\n\" ======= coc settings\nset updatetime=300\nset shortmess+=c\n\n\" Use leader T to show documentation in preview window\nnnoremap <leader>t :call <SID>show_documentation()<CR>\n\n\nfunction! s:show_documentation()\n  if (index(['vim','help'], &filetype) >= 0)\n    execute 'h '.expand('&lt;cword&gt;')\n  else\n    call CocAction('doHover')\n  endif\nendfunction\n\n\" instead of having ~/.vim/coc-settings.json\nlet s:LSP_CONFIG = {\n\\  'flow': {\n\\    'command': exepath('flow'),\n\\    'args': ['lsp'],\n\\    'filetypes': ['javascript', 'javascriptreact'],\n\\    'initializationOptions': {},\n\\    'requireRootPattern': 1,\n\\    'settings': {},\n\\    'rootPatterns': ['.flowconfig']\n\\  }\n\\}\n\nlet s:languageservers = {}\nfor [lsp, config] in items(s:LSP_CONFIG)\n  let s:not_empty_cmd = !empty(get(config, 'command'))\n  if s:not_empty_cmd | let s:languageservers[lsp] = config | endif\nendfor\n\nif !empty(s:languageservers)\n  call coc#config('languageserver', s:languageservers)\n  endif\n")),(0,a.mdx)("h2",{id:"toc-languageclient-neovim"},"LanguageClient-neovim"),(0,a.mdx)("p",null,"Another way to add support for Flow in Vim is to use ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/autozimu/LanguageClient-neovim"},"LanguageClient-neovim"),"."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Suports vim 8 and neovim"),(0,a.mdx)("li",{parentName:"ul"},"Adds completions to omnifunc"),(0,a.mdx)("li",{parentName:"ul"},"Checks JavaScript files for type errors on save"),(0,a.mdx)("li",{parentName:"ul"},"Look up types under cursor")),(0,a.mdx)("h3",{id:"toc-requirements"},"Requirements"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Requires Flow to be installed and available on your path."),(0,a.mdx)("li",{parentName:"ul"},"Requires projects containing JavaScript files to be initialised with flow init."),(0,a.mdx)("li",{parentName:"ul"},"Requires JavaScript files to be marked with /",(0,a.mdx)("em",{parentName:"li"}," @flow "),"/ at the top.")),(0,a.mdx)("h3",{id:"toc-pathogen"},"Pathogen"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"cd ~/.vim/bundle\ngit clone git://github.com/autozimu/LanguageClient-neovim.git\n")),(0,a.mdx)("h3",{id:"toc-neobundle"},"NeoBundle"),(0,a.mdx)("p",null,"Add this to your ~/.vimrc"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-vim"},"  NeoBundleLazy 'autozimu/LanguageClient-neovim', {\n    \\ 'autoload': {\n    \\     'filetypes': 'javascript'\n    \\ }}\n")),(0,a.mdx)("p",null,"With Flow build step, using flow-bin"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-vim"},"  NeoBundleLazy 'autozimu/LanguageClient-neovim', {\n    \\ 'autoload': {\n    \\     'filetypes': 'javascript'\n    \\ },\n    \\ 'build': {\n    \\     'mac': 'npm install -g flow-bin',\n    \\     'unix': 'npm install -g flow-bin'\n    \\ }}\n")),(0,a.mdx)("h3",{id:"toc-vimplug"},"VimPlug"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-vim"},"  Plug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh && npm install -g flow-bin',\n    \\ }\n")),(0,a.mdx)("h3",{id:"toc-setup"},"Setup"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-vim"},"let g:LanguageClient_rootMarkers = {\n\\   'javascript': ['.flowconfig', 'package.json']\n\\ }\nlet g:LanguageClient_serverCommands={\n\\   'javascript': ['flow', 'lsp'],\n\\   'javascript.jsx': ['flow', 'lsp']\n\\}\n\n\" check the type under cursor w/ leader T\nnnoremap <leader>t :call LanguageClient_textDocument_hover()<CR>\nnnoremap <leader>y :call LanguageClient_textDocument_definition()<CR>\n")))}d.isMDXComponent=!0}}]);